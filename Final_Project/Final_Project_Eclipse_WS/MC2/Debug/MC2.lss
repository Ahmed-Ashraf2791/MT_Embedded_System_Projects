
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002f5e  00002ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800168  00800168  000030fa  2**0
                  ALLOC
  3 .stab         00002f40  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001745  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007781  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c932  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__vector_7>
      20:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_8>
      24:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 38       	cpi	r26, 0x8A	; 138
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e5       	ldi	r30, 0x5E	; 94
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <main>
      8a:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 75 17 	jmp	0x2eea	; 0x2eea <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <buzzer_timer>:
uint32 password=0;
uint32 re_password=0;
uint8 pass[6];
uint8 re_pass[6];
uint8 pass_from_memory[6];
void buzzer_timer(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	tick++;
     e36:	80 91 70 01 	lds	r24, 0x0170
     e3a:	90 91 71 01 	lds	r25, 0x0171
     e3e:	a0 91 72 01 	lds	r26, 0x0172
     e42:	b0 91 73 01 	lds	r27, 0x0173
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	a1 1d       	adc	r26, r1
     e4a:	b1 1d       	adc	r27, r1
     e4c:	80 93 70 01 	sts	0x0170, r24
     e50:	90 93 71 01 	sts	0x0171, r25
     e54:	a0 93 72 01 	sts	0x0172, r26
     e58:	b0 93 73 01 	sts	0x0173, r27
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <read_pass_from_memory>:
void read_pass_from_memory(void){
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	c7 54       	subi	r28, 0x47	; 71
     e70:	d0 40       	sbci	r29, 0x00	; 0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
	uint8 u8data;
	EEPROM_readByte(100, &u8data);
     e7c:	9e 01       	movw	r18, r28
     e7e:	29 5b       	subi	r18, 0xB9	; 185
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	84 e6       	ldi	r24, 0x64	; 100
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	b9 01       	movw	r22, r18
     e88:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
	pass_from_memory[0]=u8data;
     e8c:	fe 01       	movw	r30, r28
     e8e:	e9 5b       	subi	r30, 0xB9	; 185
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 81       	ld	r24, Z
     e94:	80 93 78 01 	sts	0x0178, r24
	EEPROM_readByte(101, &u8data);
     e98:	9e 01       	movw	r18, r28
     e9a:	29 5b       	subi	r18, 0xB9	; 185
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	85 e6       	ldi	r24, 0x65	; 101
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
     ea8:	fe 01       	movw	r30, r28
     eaa:	ed 5b       	subi	r30, 0xBD	; 189
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e2       	ldi	r26, 0x20	; 32
     eb4:	b1 e4       	ldi	r27, 0x41	; 65
     eb6:	80 83       	st	Z, r24
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	a2 83       	std	Z+2, r26	; 0x02
     ebc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebe:	8e 01       	movw	r16, r28
     ec0:	01 5c       	subi	r16, 0xC1	; 193
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	fe 01       	movw	r30, r28
     ec6:	ed 5b       	subi	r30, 0xBD	; 189
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	4a ef       	ldi	r20, 0xFA	; 250
     ed8:	54 e4       	ldi	r21, 0x44	; 68
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	f8 01       	movw	r30, r16
     ee4:	80 83       	st	Z, r24
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	a2 83       	std	Z+2, r26	; 0x02
     eea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eec:	fe 01       	movw	r30, r28
     eee:	ff 96       	adiw	r30, 0x3f	; 63
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <read_pass_from_memory+0xb0>
		__ticks = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9e af       	std	Y+62, r25	; 0x3e
     f0e:	8d af       	std	Y+61, r24	; 0x3d
     f10:	46 c0       	rjmp	.+140    	; 0xf9e <read_pass_from_memory+0x13c>
	else if (__tmp > 65535)
     f12:	fe 01       	movw	r30, r28
     f14:	ff 96       	adiw	r30, 0x3f	; 63
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f2a:	18 16       	cp	r1, r24
     f2c:	64 f5       	brge	.+88     	; 0xf86 <read_pass_from_memory+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2e:	fe 01       	movw	r30, r28
     f30:	ed 5b       	subi	r30, 0xBD	; 189
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	60 81       	ld	r22, Z
     f36:	71 81       	ldd	r23, Z+1	; 0x01
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	93 81       	ldd	r25, Z+3	; 0x03
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e af       	std	Y+62, r25	; 0x3e
     f5a:	8d af       	std	Y+61, r24	; 0x3d
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <read_pass_from_memory+0x11a>
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c af       	std	Y+60, r25	; 0x3c
     f64:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f66:	8b ad       	ldd	r24, Y+59	; 0x3b
     f68:	9c ad       	ldd	r25, Y+60	; 0x3c
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <read_pass_from_memory+0x108>
     f6e:	9c af       	std	Y+60, r25	; 0x3c
     f70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	8d ad       	ldd	r24, Y+61	; 0x3d
     f74:	9e ad       	ldd	r25, Y+62	; 0x3e
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9e af       	std	Y+62, r25	; 0x3e
     f7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f7e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	69 f7       	brne	.-38     	; 0xf5e <read_pass_from_memory+0xfc>
     f84:	16 c0       	rjmp	.+44     	; 0xfb2 <read_pass_from_memory+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f86:	fe 01       	movw	r30, r28
     f88:	ff 96       	adiw	r30, 0x3f	; 63
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e af       	std	Y+62, r25	; 0x3e
     f9c:	8d af       	std	Y+61, r24	; 0x3d
     f9e:	8d ad       	ldd	r24, Y+61	; 0x3d
     fa0:	9e ad       	ldd	r25, Y+62	; 0x3e
     fa2:	9a af       	std	Y+58, r25	; 0x3a
     fa4:	89 af       	std	Y+57, r24	; 0x39
     fa6:	89 ad       	ldd	r24, Y+57	; 0x39
     fa8:	9a ad       	ldd	r25, Y+58	; 0x3a
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <read_pass_from_memory+0x148>
     fae:	9a af       	std	Y+58, r25	; 0x3a
     fb0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	pass_from_memory[1]=u8data;
     fb2:	fe 01       	movw	r30, r28
     fb4:	e9 5b       	subi	r30, 0xB9	; 185
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	80 93 79 01 	sts	0x0179, r24
	EEPROM_readByte(102, &u8data);
     fbe:	9e 01       	movw	r18, r28
     fc0:	29 5b       	subi	r18, 0xB9	; 185
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	86 e6       	ldi	r24, 0x66	; 102
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e2       	ldi	r26, 0x20	; 32
     fd4:	b1 e4       	ldi	r27, 0x41	; 65
     fd6:	8d ab       	std	Y+53, r24	; 0x35
     fd8:	9e ab       	std	Y+54, r25	; 0x36
     fda:	af ab       	std	Y+55, r26	; 0x37
     fdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	6d a9       	ldd	r22, Y+53	; 0x35
     fe0:	7e a9       	ldd	r23, Y+54	; 0x36
     fe2:	8f a9       	ldd	r24, Y+55	; 0x37
     fe4:	98 ad       	ldd	r25, Y+56	; 0x38
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4a ef       	ldi	r20, 0xFA	; 250
     fec:	54 e4       	ldi	r21, 0x44	; 68
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	89 ab       	std	Y+49, r24	; 0x31
     ff8:	9a ab       	std	Y+50, r25	; 0x32
     ffa:	ab ab       	std	Y+51, r26	; 0x33
     ffc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    1000:	7a a9       	ldd	r23, Y+50	; 0x32
    1002:	8b a9       	ldd	r24, Y+51	; 0x33
    1004:	9c a9       	ldd	r25, Y+52	; 0x34
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1012:	88 23       	and	r24, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <read_pass_from_memory+0x1be>
		__ticks = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 ab       	std	Y+48, r25	; 0x30
    101c:	8f a7       	std	Y+47, r24	; 0x2f
    101e:	3f c0       	rjmp	.+126    	; 0x109e <read_pass_from_memory+0x23c>
	else if (__tmp > 65535)
    1020:	69 a9       	ldd	r22, Y+49	; 0x31
    1022:	7a a9       	ldd	r23, Y+50	; 0x32
    1024:	8b a9       	ldd	r24, Y+51	; 0x33
    1026:	9c a9       	ldd	r25, Y+52	; 0x34
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	4f e7       	ldi	r20, 0x7F	; 127
    102e:	57 e4       	ldi	r21, 0x47	; 71
    1030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1034:	18 16       	cp	r1, r24
    1036:	4c f5       	brge	.+82     	; 0x108a <read_pass_from_memory+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1038:	6d a9       	ldd	r22, Y+53	; 0x35
    103a:	7e a9       	ldd	r23, Y+54	; 0x36
    103c:	8f a9       	ldd	r24, Y+55	; 0x37
    103e:	98 ad       	ldd	r25, Y+56	; 0x38
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	98 ab       	std	Y+48, r25	; 0x30
    105e:	8f a7       	std	Y+47, r24	; 0x2f
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <read_pass_from_memory+0x21e>
    1062:	88 ec       	ldi	r24, 0xC8	; 200
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9e a7       	std	Y+46, r25	; 0x2e
    1068:	8d a7       	std	Y+45, r24	; 0x2d
    106a:	8d a5       	ldd	r24, Y+45	; 0x2d
    106c:	9e a5       	ldd	r25, Y+46	; 0x2e
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <read_pass_from_memory+0x20c>
    1072:	9e a7       	std	Y+46, r25	; 0x2e
    1074:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1076:	8f a5       	ldd	r24, Y+47	; 0x2f
    1078:	98 a9       	ldd	r25, Y+48	; 0x30
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	98 ab       	std	Y+48, r25	; 0x30
    107e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	8f a5       	ldd	r24, Y+47	; 0x2f
    1082:	98 a9       	ldd	r25, Y+48	; 0x30
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	69 f7       	brne	.-38     	; 0x1062 <read_pass_from_memory+0x200>
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <read_pass_from_memory+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108a:	69 a9       	ldd	r22, Y+49	; 0x31
    108c:	7a a9       	ldd	r23, Y+50	; 0x32
    108e:	8b a9       	ldd	r24, Y+51	; 0x33
    1090:	9c a9       	ldd	r25, Y+52	; 0x34
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	98 ab       	std	Y+48, r25	; 0x30
    109c:	8f a7       	std	Y+47, r24	; 0x2f
    109e:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a0:	98 a9       	ldd	r25, Y+48	; 0x30
    10a2:	9c a7       	std	Y+44, r25	; 0x2c
    10a4:	8b a7       	std	Y+43, r24	; 0x2b
    10a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <read_pass_from_memory+0x248>
    10ae:	9c a7       	std	Y+44, r25	; 0x2c
    10b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	pass_from_memory[2]=u8data;
    10b2:	fe 01       	movw	r30, r28
    10b4:	e9 5b       	subi	r30, 0xB9	; 185
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	80 93 7a 01 	sts	0x017A, r24
	EEPROM_readByte(103, &u8data);
    10be:	9e 01       	movw	r18, r28
    10c0:	29 5b       	subi	r18, 0xB9	; 185
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	87 e6       	ldi	r24, 0x67	; 103
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b9 01       	movw	r22, r18
    10ca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 e2       	ldi	r26, 0x20	; 32
    10d4:	b1 e4       	ldi	r27, 0x41	; 65
    10d6:	8f a3       	std	Y+39, r24	; 0x27
    10d8:	98 a7       	std	Y+40, r25	; 0x28
    10da:	a9 a7       	std	Y+41, r26	; 0x29
    10dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10de:	6f a1       	ldd	r22, Y+39	; 0x27
    10e0:	78 a5       	ldd	r23, Y+40	; 0x28
    10e2:	89 a5       	ldd	r24, Y+41	; 0x29
    10e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a ef       	ldi	r20, 0xFA	; 250
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8b a3       	std	Y+35, r24	; 0x23
    10f8:	9c a3       	std	Y+36, r25	; 0x24
    10fa:	ad a3       	std	Y+37, r26	; 0x25
    10fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1100:	7c a1       	ldd	r23, Y+36	; 0x24
    1102:	8d a1       	ldd	r24, Y+37	; 0x25
    1104:	9e a1       	ldd	r25, Y+38	; 0x26
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1112:	88 23       	and	r24, r24
    1114:	2c f4       	brge	.+10     	; 0x1120 <read_pass_from_memory+0x2be>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9a a3       	std	Y+34, r25	; 0x22
    111c:	89 a3       	std	Y+33, r24	; 0x21
    111e:	3f c0       	rjmp	.+126    	; 0x119e <read_pass_from_memory+0x33c>
	else if (__tmp > 65535)
    1120:	6b a1       	ldd	r22, Y+35	; 0x23
    1122:	7c a1       	ldd	r23, Y+36	; 0x24
    1124:	8d a1       	ldd	r24, Y+37	; 0x25
    1126:	9e a1       	ldd	r25, Y+38	; 0x26
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	3f ef       	ldi	r19, 0xFF	; 255
    112c:	4f e7       	ldi	r20, 0x7F	; 127
    112e:	57 e4       	ldi	r21, 0x47	; 71
    1130:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1134:	18 16       	cp	r1, r24
    1136:	4c f5       	brge	.+82     	; 0x118a <read_pass_from_memory+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	6f a1       	ldd	r22, Y+39	; 0x27
    113a:	78 a5       	ldd	r23, Y+40	; 0x28
    113c:	89 a5       	ldd	r24, Y+41	; 0x29
    113e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	51 e4       	ldi	r21, 0x41	; 65
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	89 a3       	std	Y+33, r24	; 0x21
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <read_pass_from_memory+0x31e>
    1162:	88 ec       	ldi	r24, 0xC8	; 200
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	98 a3       	std	Y+32, r25	; 0x20
    1168:	8f 8f       	std	Y+31, r24	; 0x1f
    116a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    116c:	98 a1       	ldd	r25, Y+32	; 0x20
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <read_pass_from_memory+0x30c>
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	89 a1       	ldd	r24, Y+33	; 0x21
    1178:	9a a1       	ldd	r25, Y+34	; 0x22
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	9a a3       	std	Y+34, r25	; 0x22
    117e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1180:	89 a1       	ldd	r24, Y+33	; 0x21
    1182:	9a a1       	ldd	r25, Y+34	; 0x22
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	69 f7       	brne	.-38     	; 0x1162 <read_pass_from_memory+0x300>
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <read_pass_from_memory+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    118a:	6b a1       	ldd	r22, Y+35	; 0x23
    118c:	7c a1       	ldd	r23, Y+36	; 0x24
    118e:	8d a1       	ldd	r24, Y+37	; 0x25
    1190:	9e a1       	ldd	r25, Y+38	; 0x26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9a a3       	std	Y+34, r25	; 0x22
    119c:	89 a3       	std	Y+33, r24	; 0x21
    119e:	89 a1       	ldd	r24, Y+33	; 0x21
    11a0:	9a a1       	ldd	r25, Y+34	; 0x22
    11a2:	9e 8f       	std	Y+30, r25	; 0x1e
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
    11a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <read_pass_from_memory+0x348>
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	pass_from_memory[3]=u8data;
    11b2:	fe 01       	movw	r30, r28
    11b4:	e9 5b       	subi	r30, 0xB9	; 185
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	80 93 7b 01 	sts	0x017B, r24
	EEPROM_readByte(104, &u8data);
    11be:	9e 01       	movw	r18, r28
    11c0:	29 5b       	subi	r18, 0xB9	; 185
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	88 e6       	ldi	r24, 0x68	; 104
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	b9 01       	movw	r22, r18
    11ca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e2       	ldi	r26, 0x20	; 32
    11d4:	b1 e4       	ldi	r27, 0x41	; 65
    11d6:	89 8f       	std	Y+25, r24	; 0x19
    11d8:	9a 8f       	std	Y+26, r25	; 0x1a
    11da:	ab 8f       	std	Y+27, r26	; 0x1b
    11dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11de:	69 8d       	ldd	r22, Y+25	; 0x19
    11e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	4a ef       	ldi	r20, 0xFA	; 250
    11ec:	54 e4       	ldi	r21, 0x44	; 68
    11ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	8d 8b       	std	Y+21, r24	; 0x15
    11f8:	9e 8b       	std	Y+22, r25	; 0x16
    11fa:	af 8b       	std	Y+23, r26	; 0x17
    11fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1200:	7e 89       	ldd	r23, Y+22	; 0x16
    1202:	8f 89       	ldd	r24, Y+23	; 0x17
    1204:	98 8d       	ldd	r25, Y+24	; 0x18
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e8       	ldi	r20, 0x80	; 128
    120c:	5f e3       	ldi	r21, 0x3F	; 63
    120e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1212:	88 23       	and	r24, r24
    1214:	2c f4       	brge	.+10     	; 0x1220 <read_pass_from_memory+0x3be>
		__ticks = 1;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9c 8b       	std	Y+20, r25	; 0x14
    121c:	8b 8b       	std	Y+19, r24	; 0x13
    121e:	3f c0       	rjmp	.+126    	; 0x129e <read_pass_from_memory+0x43c>
	else if (__tmp > 65535)
    1220:	6d 89       	ldd	r22, Y+21	; 0x15
    1222:	7e 89       	ldd	r23, Y+22	; 0x16
    1224:	8f 89       	ldd	r24, Y+23	; 0x17
    1226:	98 8d       	ldd	r25, Y+24	; 0x18
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	3f ef       	ldi	r19, 0xFF	; 255
    122c:	4f e7       	ldi	r20, 0x7F	; 127
    122e:	57 e4       	ldi	r21, 0x47	; 71
    1230:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1234:	18 16       	cp	r1, r24
    1236:	4c f5       	brge	.+82     	; 0x128a <read_pass_from_memory+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1238:	69 8d       	ldd	r22, Y+25	; 0x19
    123a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    123c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9c 8b       	std	Y+20, r25	; 0x14
    125e:	8b 8b       	std	Y+19, r24	; 0x13
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <read_pass_from_memory+0x41e>
    1262:	88 ec       	ldi	r24, 0xC8	; 200
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9a 8b       	std	Y+18, r25	; 0x12
    1268:	89 8b       	std	Y+17, r24	; 0x11
    126a:	89 89       	ldd	r24, Y+17	; 0x11
    126c:	9a 89       	ldd	r25, Y+18	; 0x12
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <read_pass_from_memory+0x40c>
    1272:	9a 8b       	std	Y+18, r25	; 0x12
    1274:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1276:	8b 89       	ldd	r24, Y+19	; 0x13
    1278:	9c 89       	ldd	r25, Y+20	; 0x14
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	9c 8b       	std	Y+20, r25	; 0x14
    127e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1280:	8b 89       	ldd	r24, Y+19	; 0x13
    1282:	9c 89       	ldd	r25, Y+20	; 0x14
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	69 f7       	brne	.-38     	; 0x1262 <read_pass_from_memory+0x400>
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <read_pass_from_memory+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128a:	6d 89       	ldd	r22, Y+21	; 0x15
    128c:	7e 89       	ldd	r23, Y+22	; 0x16
    128e:	8f 89       	ldd	r24, Y+23	; 0x17
    1290:	98 8d       	ldd	r25, Y+24	; 0x18
    1292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	9c 8b       	std	Y+20, r25	; 0x14
    129c:	8b 8b       	std	Y+19, r24	; 0x13
    129e:	8b 89       	ldd	r24, Y+19	; 0x13
    12a0:	9c 89       	ldd	r25, Y+20	; 0x14
    12a2:	98 8b       	std	Y+16, r25	; 0x10
    12a4:	8f 87       	std	Y+15, r24	; 0x0f
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	98 89       	ldd	r25, Y+16	; 0x10
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <read_pass_from_memory+0x448>
    12ae:	98 8b       	std	Y+16, r25	; 0x10
    12b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	pass_from_memory[4]=u8data;
    12b2:	fe 01       	movw	r30, r28
    12b4:	e9 5b       	subi	r30, 0xB9	; 185
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 81       	ld	r24, Z
    12ba:	80 93 7c 01 	sts	0x017C, r24
	EEPROM_readByte(105, &u8data);
    12be:	9e 01       	movw	r18, r28
    12c0:	29 5b       	subi	r18, 0xB9	; 185
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	89 e6       	ldi	r24, 0x69	; 105
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	b9 01       	movw	r22, r18
    12ca:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <EEPROM_readByte>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 e2       	ldi	r26, 0x20	; 32
    12d4:	b1 e4       	ldi	r27, 0x41	; 65
    12d6:	8b 87       	std	Y+11, r24	; 0x0b
    12d8:	9c 87       	std	Y+12, r25	; 0x0c
    12da:	ad 87       	std	Y+13, r26	; 0x0d
    12dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8f 83       	std	Y+7, r24	; 0x07
    12f8:	98 87       	std	Y+8, r25	; 0x08
    12fa:	a9 87       	std	Y+9, r26	; 0x09
    12fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <read_pass_from_memory+0x4be>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	3f c0       	rjmp	.+126    	; 0x139e <read_pass_from_memory+0x53c>
	else if (__tmp > 65535)
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	78 85       	ldd	r23, Y+8	; 0x08
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <read_pass_from_memory+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <read_pass_from_memory+0x51e>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <read_pass_from_memory+0x50c>
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <read_pass_from_memory+0x500>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <read_pass_from_memory+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6f 81       	ldd	r22, Y+7	; 0x07
    138c:	78 85       	ldd	r23, Y+8	; 0x08
    138e:	89 85       	ldd	r24, Y+9	; 0x09
    1390:	9a 85       	ldd	r25, Y+10	; 0x0a
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <read_pass_from_memory+0x548>
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	pass_from_memory[5]=u8data;
    13b2:	fe 01       	movw	r30, r28
    13b4:	e9 5b       	subi	r30, 0xB9	; 185
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 81       	ld	r24, Z
    13ba:	80 93 7d 01 	sts	0x017D, r24
}
    13be:	c9 5b       	subi	r28, 0xB9	; 185
    13c0:	df 4f       	sbci	r29, 0xFF	; 255
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <write_pass_in_memory>:
void write_pass_in_memory(void){
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	c5 55       	subi	r28, 0x55	; 85
    13e4:	d0 40       	sbci	r29, 0x00	; 0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
	uint8 u8data=pass[0];
    13f0:	fe 01       	movw	r30, r28
    13f2:	eb 5a       	subi	r30, 0xAB	; 171
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 91 7e 01 	lds	r24, 0x017E
    13fa:	80 83       	st	Z, r24
	EEPROM_writeByte(100,u8data);
    13fc:	fe 01       	movw	r30, r28
    13fe:	eb 5a       	subi	r30, 0xAB	; 171
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	84 e6       	ldi	r24, 0x64	; 100
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	60 81       	ld	r22, Z
    1408:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    140c:	fe 01       	movw	r30, r28
    140e:	ef 5a       	subi	r30, 0xAF	; 175
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e2       	ldi	r26, 0x20	; 32
    1418:	b1 e4       	ldi	r27, 0x41	; 65
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	8e 01       	movw	r16, r28
    1424:	03 5b       	subi	r16, 0xB3	; 179
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	fe 01       	movw	r30, r28
    142a:	ef 5a       	subi	r30, 0xAF	; 175
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4a ef       	ldi	r20, 0xFA	; 250
    143c:	54 e4       	ldi	r21, 0x44	; 68
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	f8 01       	movw	r30, r16
    1448:	80 83       	st	Z, r24
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	a2 83       	std	Z+2, r26	; 0x02
    144e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1450:	fe 01       	movw	r30, r28
    1452:	e3 5b       	subi	r30, 0xB3	; 179
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	44 f4       	brge	.+16     	; 0x147e <write_pass_in_memory+0xa8>
		__ticks = 1;
    146e:	fe 01       	movw	r30, r28
    1470:	e5 5b       	subi	r30, 0xB5	; 181
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	64 c0       	rjmp	.+200    	; 0x1546 <write_pass_in_memory+0x170>
	else if (__tmp > 65535)
    147e:	fe 01       	movw	r30, r28
    1480:	e3 5b       	subi	r30, 0xB3	; 179
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	60 81       	ld	r22, Z
    1486:	71 81       	ldd	r23, Z+1	; 0x01
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	57 e4       	ldi	r21, 0x47	; 71
    1494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1498:	18 16       	cp	r1, r24
    149a:	0c f0       	brlt	.+2      	; 0x149e <write_pass_in_memory+0xc8>
    149c:	43 c0       	rjmp	.+134    	; 0x1524 <write_pass_in_memory+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	fe 01       	movw	r30, r28
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8e 01       	movw	r16, r28
    14be:	05 5b       	subi	r16, 0xB5	; 181
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	80 83       	st	Z, r24
    14d4:	1f c0       	rjmp	.+62     	; 0x1514 <write_pass_in_memory+0x13e>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e7 5b       	subi	r30, 0xB7	; 183
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 5b       	subi	r30, 0xB7	; 183
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <write_pass_in_memory+0x118>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e7 5b       	subi	r30, 0xB7	; 183
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	de 01       	movw	r26, r28
    14fe:	a5 5b       	subi	r26, 0xB5	; 181
    1500:	bf 4f       	sbci	r27, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	e5 5b       	subi	r30, 0xB5	; 181
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	fe 01       	movw	r30, r28
    1516:	e5 5b       	subi	r30, 0xB5	; 181
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	d1 f6       	brne	.-76     	; 0x14d6 <write_pass_in_memory+0x100>
    1522:	27 c0       	rjmp	.+78     	; 0x1572 <write_pass_in_memory+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	8e 01       	movw	r16, r28
    1526:	05 5b       	subi	r16, 0xB5	; 181
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	e3 5b       	subi	r30, 0xB3	; 179
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	f8 01       	movw	r30, r16
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    1546:	de 01       	movw	r26, r28
    1548:	a9 5b       	subi	r26, 0xB9	; 185
    154a:	bf 4f       	sbci	r27, 0xFF	; 255
    154c:	fe 01       	movw	r30, r28
    154e:	e5 5b       	subi	r30, 0xB5	; 181
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	8d 93       	st	X+, r24
    1558:	9c 93       	st	X, r25
    155a:	fe 01       	movw	r30, r28
    155c:	e9 5b       	subi	r30, 0xB9	; 185
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <write_pass_in_memory+0x18e>
    1568:	fe 01       	movw	r30, r28
    156a:	e9 5b       	subi	r30, 0xB9	; 185
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
	_delay_ms(10);
	u8data=pass[1];
    1572:	fe 01       	movw	r30, r28
    1574:	eb 5a       	subi	r30, 0xAB	; 171
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 91 7f 01 	lds	r24, 0x017F
    157c:	80 83       	st	Z, r24
	EEPROM_writeByte(101,u8data);
    157e:	fe 01       	movw	r30, r28
    1580:	eb 5a       	subi	r30, 0xAB	; 171
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	85 e6       	ldi	r24, 0x65	; 101
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	60 81       	ld	r22, Z
    158a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    158e:	fe 01       	movw	r30, r28
    1590:	ed 5b       	subi	r30, 0xBD	; 189
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e2       	ldi	r26, 0x20	; 32
    159a:	b1 e4       	ldi	r27, 0x41	; 65
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	a2 83       	std	Z+2, r26	; 0x02
    15a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	8e 01       	movw	r16, r28
    15a6:	01 5c       	subi	r16, 0xC1	; 193
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	fe 01       	movw	r30, r28
    15ac:	ed 5b       	subi	r30, 0xBD	; 189
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a ef       	ldi	r20, 0xFA	; 250
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	80 83       	st	Z, r24
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	a2 83       	std	Z+2, r26	; 0x02
    15d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d2:	fe 01       	movw	r30, r28
    15d4:	ff 96       	adiw	r30, 0x3f	; 63
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <write_pass_in_memory+0x222>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9e af       	std	Y+62, r25	; 0x3e
    15f4:	8d af       	std	Y+61, r24	; 0x3d
    15f6:	46 c0       	rjmp	.+140    	; 0x1684 <write_pass_in_memory+0x2ae>
	else if (__tmp > 65535)
    15f8:	fe 01       	movw	r30, r28
    15fa:	ff 96       	adiw	r30, 0x3f	; 63
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f e7       	ldi	r20, 0x7F	; 127
    160a:	57 e4       	ldi	r21, 0x47	; 71
    160c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1610:	18 16       	cp	r1, r24
    1612:	64 f5       	brge	.+88     	; 0x166c <write_pass_in_memory+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	fe 01       	movw	r30, r28
    1616:	ed 5b       	subi	r30, 0xBD	; 189
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9e af       	std	Y+62, r25	; 0x3e
    1640:	8d af       	std	Y+61, r24	; 0x3d
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <write_pass_in_memory+0x28c>
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c af       	std	Y+60, r25	; 0x3c
    164a:	8b af       	std	Y+59, r24	; 0x3b
    164c:	8b ad       	ldd	r24, Y+59	; 0x3b
    164e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <write_pass_in_memory+0x27a>
    1654:	9c af       	std	Y+60, r25	; 0x3c
    1656:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	8d ad       	ldd	r24, Y+61	; 0x3d
    165a:	9e ad       	ldd	r25, Y+62	; 0x3e
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9e af       	std	Y+62, r25	; 0x3e
    1660:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	8d ad       	ldd	r24, Y+61	; 0x3d
    1664:	9e ad       	ldd	r25, Y+62	; 0x3e
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f7       	brne	.-38     	; 0x1644 <write_pass_in_memory+0x26e>
    166a:	16 c0       	rjmp	.+44     	; 0x1698 <write_pass_in_memory+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	fe 01       	movw	r30, r28
    166e:	ff 96       	adiw	r30, 0x3f	; 63
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e af       	std	Y+62, r25	; 0x3e
    1682:	8d af       	std	Y+61, r24	; 0x3d
    1684:	8d ad       	ldd	r24, Y+61	; 0x3d
    1686:	9e ad       	ldd	r25, Y+62	; 0x3e
    1688:	9a af       	std	Y+58, r25	; 0x3a
    168a:	89 af       	std	Y+57, r24	; 0x39
    168c:	89 ad       	ldd	r24, Y+57	; 0x39
    168e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <write_pass_in_memory+0x2ba>
    1694:	9a af       	std	Y+58, r25	; 0x3a
    1696:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	u8data=pass[2];
    1698:	fe 01       	movw	r30, r28
    169a:	eb 5a       	subi	r30, 0xAB	; 171
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 91 80 01 	lds	r24, 0x0180
    16a2:	80 83       	st	Z, r24
	EEPROM_writeByte(102,u8data);
    16a4:	fe 01       	movw	r30, r28
    16a6:	eb 5a       	subi	r30, 0xAB	; 171
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	86 e6       	ldi	r24, 0x66	; 102
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	60 81       	ld	r22, Z
    16b0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e2       	ldi	r26, 0x20	; 32
    16ba:	b1 e4       	ldi	r27, 0x41	; 65
    16bc:	8d ab       	std	Y+53, r24	; 0x35
    16be:	9e ab       	std	Y+54, r25	; 0x36
    16c0:	af ab       	std	Y+55, r26	; 0x37
    16c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	6d a9       	ldd	r22, Y+53	; 0x35
    16c6:	7e a9       	ldd	r23, Y+54	; 0x36
    16c8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ca:	98 ad       	ldd	r25, Y+56	; 0x38
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a ef       	ldi	r20, 0xFA	; 250
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	89 ab       	std	Y+49, r24	; 0x31
    16de:	9a ab       	std	Y+50, r25	; 0x32
    16e0:	ab ab       	std	Y+51, r26	; 0x33
    16e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16e4:	69 a9       	ldd	r22, Y+49	; 0x31
    16e6:	7a a9       	ldd	r23, Y+50	; 0x32
    16e8:	8b a9       	ldd	r24, Y+51	; 0x33
    16ea:	9c a9       	ldd	r25, Y+52	; 0x34
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	2c f4       	brge	.+10     	; 0x1706 <write_pass_in_memory+0x330>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	98 ab       	std	Y+48, r25	; 0x30
    1702:	8f a7       	std	Y+47, r24	; 0x2f
    1704:	3f c0       	rjmp	.+126    	; 0x1784 <write_pass_in_memory+0x3ae>
	else if (__tmp > 65535)
    1706:	69 a9       	ldd	r22, Y+49	; 0x31
    1708:	7a a9       	ldd	r23, Y+50	; 0x32
    170a:	8b a9       	ldd	r24, Y+51	; 0x33
    170c:	9c a9       	ldd	r25, Y+52	; 0x34
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	4c f5       	brge	.+82     	; 0x1770 <write_pass_in_memory+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	6d a9       	ldd	r22, Y+53	; 0x35
    1720:	7e a9       	ldd	r23, Y+54	; 0x36
    1722:	8f a9       	ldd	r24, Y+55	; 0x37
    1724:	98 ad       	ldd	r25, Y+56	; 0x38
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <write_pass_in_memory+0x390>
    1748:	88 ec       	ldi	r24, 0xC8	; 200
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e a7       	std	Y+46, r25	; 0x2e
    174e:	8d a7       	std	Y+45, r24	; 0x2d
    1750:	8d a5       	ldd	r24, Y+45	; 0x2d
    1752:	9e a5       	ldd	r25, Y+46	; 0x2e
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <write_pass_in_memory+0x37e>
    1758:	9e a7       	std	Y+46, r25	; 0x2e
    175a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	8f a5       	ldd	r24, Y+47	; 0x2f
    175e:	98 a9       	ldd	r25, Y+48	; 0x30
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	98 ab       	std	Y+48, r25	; 0x30
    1764:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	8f a5       	ldd	r24, Y+47	; 0x2f
    1768:	98 a9       	ldd	r25, Y+48	; 0x30
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f7       	brne	.-38     	; 0x1748 <write_pass_in_memory+0x372>
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <write_pass_in_memory+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	98 ab       	std	Y+48, r25	; 0x30
    1782:	8f a7       	std	Y+47, r24	; 0x2f
    1784:	8f a5       	ldd	r24, Y+47	; 0x2f
    1786:	98 a9       	ldd	r25, Y+48	; 0x30
    1788:	9c a7       	std	Y+44, r25	; 0x2c
    178a:	8b a7       	std	Y+43, r24	; 0x2b
    178c:	8b a5       	ldd	r24, Y+43	; 0x2b
    178e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <write_pass_in_memory+0x3ba>
    1794:	9c a7       	std	Y+44, r25	; 0x2c
    1796:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	u8data=pass[3];
    1798:	fe 01       	movw	r30, r28
    179a:	eb 5a       	subi	r30, 0xAB	; 171
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 91 81 01 	lds	r24, 0x0181
    17a2:	80 83       	st	Z, r24
	EEPROM_writeByte(103,u8data);
    17a4:	fe 01       	movw	r30, r28
    17a6:	eb 5a       	subi	r30, 0xAB	; 171
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	87 e6       	ldi	r24, 0x67	; 103
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	60 81       	ld	r22, Z
    17b0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e2       	ldi	r26, 0x20	; 32
    17ba:	b1 e4       	ldi	r27, 0x41	; 65
    17bc:	8f a3       	std	Y+39, r24	; 0x27
    17be:	98 a7       	std	Y+40, r25	; 0x28
    17c0:	a9 a7       	std	Y+41, r26	; 0x29
    17c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6f a1       	ldd	r22, Y+39	; 0x27
    17c6:	78 a5       	ldd	r23, Y+40	; 0x28
    17c8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8b a3       	std	Y+35, r24	; 0x23
    17de:	9c a3       	std	Y+36, r25	; 0x24
    17e0:	ad a3       	std	Y+37, r26	; 0x25
    17e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17e4:	6b a1       	ldd	r22, Y+35	; 0x23
    17e6:	7c a1       	ldd	r23, Y+36	; 0x24
    17e8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ea:	9e a1       	ldd	r25, Y+38	; 0x26
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <write_pass_in_memory+0x430>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9a a3       	std	Y+34, r25	; 0x22
    1802:	89 a3       	std	Y+33, r24	; 0x21
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <write_pass_in_memory+0x4ae>
	else if (__tmp > 65535)
    1806:	6b a1       	ldd	r22, Y+35	; 0x23
    1808:	7c a1       	ldd	r23, Y+36	; 0x24
    180a:	8d a1       	ldd	r24, Y+37	; 0x25
    180c:	9e a1       	ldd	r25, Y+38	; 0x26
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <write_pass_in_memory+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6f a1       	ldd	r22, Y+39	; 0x27
    1820:	78 a5       	ldd	r23, Y+40	; 0x28
    1822:	89 a5       	ldd	r24, Y+41	; 0x29
    1824:	9a a5       	ldd	r25, Y+42	; 0x2a
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <write_pass_in_memory+0x490>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	98 a3       	std	Y+32, r25	; 0x20
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
    1850:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1852:	98 a1       	ldd	r25, Y+32	; 0x20
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <write_pass_in_memory+0x47e>
    1858:	98 a3       	std	Y+32, r25	; 0x20
    185a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	89 a1       	ldd	r24, Y+33	; 0x21
    1868:	9a a1       	ldd	r25, Y+34	; 0x22
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <write_pass_in_memory+0x472>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <write_pass_in_memory+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6b a1       	ldd	r22, Y+35	; 0x23
    1872:	7c a1       	ldd	r23, Y+36	; 0x24
    1874:	8d a1       	ldd	r24, Y+37	; 0x25
    1876:	9e a1       	ldd	r25, Y+38	; 0x26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9a a3       	std	Y+34, r25	; 0x22
    1882:	89 a3       	std	Y+33, r24	; 0x21
    1884:	89 a1       	ldd	r24, Y+33	; 0x21
    1886:	9a a1       	ldd	r25, Y+34	; 0x22
    1888:	9e 8f       	std	Y+30, r25	; 0x1e
    188a:	8d 8f       	std	Y+29, r24	; 0x1d
    188c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    188e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <write_pass_in_memory+0x4ba>
    1894:	9e 8f       	std	Y+30, r25	; 0x1e
    1896:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	u8data=pass[4];
    1898:	fe 01       	movw	r30, r28
    189a:	eb 5a       	subi	r30, 0xAB	; 171
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 91 82 01 	lds	r24, 0x0182
    18a2:	80 83       	st	Z, r24
	EEPROM_writeByte(104,u8data);
    18a4:	fe 01       	movw	r30, r28
    18a6:	eb 5a       	subi	r30, 0xAB	; 171
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	88 e6       	ldi	r24, 0x68	; 104
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	60 81       	ld	r22, Z
    18b0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e2       	ldi	r26, 0x20	; 32
    18ba:	b1 e4       	ldi	r27, 0x41	; 65
    18bc:	89 8f       	std	Y+25, r24	; 0x19
    18be:	9a 8f       	std	Y+26, r25	; 0x1a
    18c0:	ab 8f       	std	Y+27, r26	; 0x1b
    18c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	69 8d       	ldd	r22, Y+25	; 0x19
    18c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a ef       	ldi	r20, 0xFA	; 250
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8d 8b       	std	Y+21, r24	; 0x15
    18de:	9e 8b       	std	Y+22, r25	; 0x16
    18e0:	af 8b       	std	Y+23, r26	; 0x17
    18e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e4:	6d 89       	ldd	r22, Y+21	; 0x15
    18e6:	7e 89       	ldd	r23, Y+22	; 0x16
    18e8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ea:	98 8d       	ldd	r25, Y+24	; 0x18
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <write_pass_in_memory+0x530>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <write_pass_in_memory+0x5ae>
	else if (__tmp > 65535)
    1906:	6d 89       	ldd	r22, Y+21	; 0x15
    1908:	7e 89       	ldd	r23, Y+22	; 0x16
    190a:	8f 89       	ldd	r24, Y+23	; 0x17
    190c:	98 8d       	ldd	r25, Y+24	; 0x18
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <write_pass_in_memory+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	69 8d       	ldd	r22, Y+25	; 0x19
    1920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <write_pass_in_memory+0x590>
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9a 8b       	std	Y+18, r25	; 0x12
    194e:	89 8b       	std	Y+17, r24	; 0x11
    1950:	89 89       	ldd	r24, Y+17	; 0x11
    1952:	9a 89       	ldd	r25, Y+18	; 0x12
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <write_pass_in_memory+0x57e>
    1958:	9a 8b       	std	Y+18, r25	; 0x12
    195a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8b 89       	ldd	r24, Y+19	; 0x13
    195e:	9c 89       	ldd	r25, Y+20	; 0x14
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9c 8b       	std	Y+20, r25	; 0x14
    1964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	9c 89       	ldd	r25, Y+20	; 0x14
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <write_pass_in_memory+0x572>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <write_pass_in_memory+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	98 8b       	std	Y+16, r25	; 0x10
    198a:	8f 87       	std	Y+15, r24	; 0x0f
    198c:	8f 85       	ldd	r24, Y+15	; 0x0f
    198e:	98 89       	ldd	r25, Y+16	; 0x10
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <write_pass_in_memory+0x5ba>
    1994:	98 8b       	std	Y+16, r25	; 0x10
    1996:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	u8data=pass[5];
    1998:	fe 01       	movw	r30, r28
    199a:	eb 5a       	subi	r30, 0xAB	; 171
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 91 83 01 	lds	r24, 0x0183
    19a2:	80 83       	st	Z, r24
	EEPROM_writeByte(105,u8data);
    19a4:	fe 01       	movw	r30, r28
    19a6:	eb 5a       	subi	r30, 0xAB	; 171
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	89 e6       	ldi	r24, 0x69	; 105
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	60 81       	ld	r22, Z
    19b0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <EEPROM_writeByte>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e2       	ldi	r26, 0x20	; 32
    19ba:	b1 e4       	ldi	r27, 0x41	; 65
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <write_pass_in_memory+0x630>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <write_pass_in_memory+0x6ae>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <write_pass_in_memory+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <write_pass_in_memory+0x690>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <write_pass_in_memory+0x67e>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <write_pass_in_memory+0x672>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <write_pass_in_memory+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <write_pass_in_memory+0x6ba>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1a98:	cb 5a       	subi	r28, 0xAB	; 171
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <step_three>:
void step_three(void){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Init();
    1ab8:	0e 94 86 13 	call	0x270c	; 0x270c <DcMotor_Init>
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <step_one>:
void step_one(void){
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <step_one+0x6>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	uint8 flag=1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	8a 83       	std	Y+2, r24	; 0x02
	uint8 step=0;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
	UART_receiveString(pass);
    1ad2:	8e e7       	ldi	r24, 0x7E	; 126
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
	UART_receiveString(re_pass);
    1ada:	84 e8       	ldi	r24, 0x84	; 132
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
	flag=strcmp(pass,re_pass);
    1ae2:	8e e7       	ldi	r24, 0x7E	; 126
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	24 e8       	ldi	r18, 0x84	; 132
    1ae8:	31 e0       	ldi	r19, 0x01	; 1
    1aea:	b9 01       	movw	r22, r18
    1aec:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strcmp>
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	15 c0       	rjmp	.+42     	; 0x1b1e <step_one+0x5c>
	while(flag!=0){
		step=1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(step);
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
		UART_receiveString(pass);
    1afe:	8e e7       	ldi	r24, 0x7E	; 126
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
		UART_receiveString(re_pass);
    1b06:	84 e8       	ldi	r24, 0x84	; 132
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
		flag=strcmp(pass,re_pass);
    1b0e:	8e e7       	ldi	r24, 0x7E	; 126
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	24 e8       	ldi	r18, 0x84	; 132
    1b14:	31 e0       	ldi	r19, 0x01	; 1
    1b16:	b9 01       	movw	r22, r18
    1b18:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strcmp>
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 flag=1;
	uint8 step=0;
	UART_receiveString(pass);
	UART_receiveString(re_pass);
	flag=strcmp(pass,re_pass);
	while(flag!=0){
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 23       	and	r24, r24
    1b22:	41 f7       	brne	.-48     	; 0x1af4 <step_one+0x32>
		UART_sendByte(step);
		UART_receiveString(pass);
		UART_receiveString(re_pass);
		flag=strcmp(pass,re_pass);
	}
	step=2;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(step);
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
	write_pass_in_memory();
    1b2e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <write_pass_in_memory>
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <main>:
int main(){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	68 97       	sbiw	r28, 0x18	; 24
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    1b50:	af e5       	ldi	r26, 0x5F	; 95
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	ef e5       	ldi	r30, 0x5F	; 95
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 68       	ori	r24, 0x80	; 128
    1b5c:	8c 93       	st	X, r24
	/*init UART*/
	UART_ConfigType  Config_Ptr_UART;
	Config_Ptr_UART.baud_rate = BUAD_RATE_9600_bps;
    1b5e:	80 e8       	ldi	r24, 0x80	; 128
    1b60:	95 e2       	ldi	r25, 0x25	; 37
    1b62:	a0 e0       	ldi	r26, 0x00	; 0
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	8a 87       	std	Y+10, r24	; 0x0a
    1b68:	9b 87       	std	Y+11, r25	; 0x0b
    1b6a:	ac 87       	std	Y+12, r26	; 0x0c
    1b6c:	bd 87       	std	Y+13, r27	; 0x0d
	Config_Ptr_UART.bit_data = EIGHT_DATA_BIT;
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	8f 83       	std	Y+7, r24	; 0x07
	Config_Ptr_UART.stop_bit = ONE_STOP_BIT;
    1b72:	19 86       	std	Y+9, r1	; 0x09
	Config_Ptr_UART.parity = DISABLED;
    1b74:	18 86       	std	Y+8, r1	; 0x08
	UART_init(&Config_Ptr_UART);
    1b76:	ce 01       	movw	r24, r28
    1b78:	07 96       	adiw	r24, 0x07	; 7
    1b7a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_init>
	/*init TWI*/
	TWI_ConfigType Config_Ptr_twi;
	Config_Ptr_twi.address=1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	8e 87       	std	Y+14, r24	; 0x0e
	Config_Ptr_twi.bit_rate=400000;
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	9a e1       	ldi	r25, 0x1A	; 26
    1b86:	a6 e0       	ldi	r26, 0x06	; 6
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	a9 8b       	std	Y+17, r26	; 0x11
    1b90:	ba 8b       	std	Y+18, r27	; 0x12
	TWI_init(&Config_Ptr_twi);
    1b92:	ce 01       	movw	r24, r28
    1b94:	0e 96       	adiw	r24, 0x0e	; 14
    1b96:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <TWI_init>
	uint8 match=1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	8e 83       	std	Y+6, r24	; 0x06
	uint8 make_step_one=1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
	while(1){
		if(make_step_one==1){
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <main+0x70>
			step_one();
    1ba8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <step_one>
		}
		make_step_one=1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	8d 83       	std	Y+5, r24	; 0x05
		/*take string to compare with one in memory*/
		read_pass_from_memory();
    1bb0:	0e 94 31 07 	call	0xe62	; 0xe62 <read_pass_from_memory>
		UART_receiveString(pass);
    1bb4:	8e e7       	ldi	r24, 0x7E	; 126
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
		uint8 flag=strcmp(pass,pass_from_memory);
    1bbc:	8e e7       	ldi	r24, 0x7E	; 126
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	28 e7       	ldi	r18, 0x78	; 120
    1bc2:	31 e0       	ldi	r19, 0x01	; 1
    1bc4:	b9 01       	movw	r22, r18
    1bc6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strcmp>
    1bca:	8c 83       	std	Y+4, r24	; 0x04
		if(flag==0){
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <main+0x98>
    1bd2:	60 c0       	rjmp	.+192    	; 0x1c94 <main+0x158>
			match=1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	8e 83       	std	Y+6, r24	; 0x06
			UART_sendByte(match);
    1bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bda:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
			uint8 number_of_step =UART_recieveByte();
    1bde:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <UART_recieveByte>
    1be2:	8b 83       	std	Y+3, r24	; 0x03
			if(number_of_step==3){
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	e1 f6       	brne	.-72     	; 0x1ba2 <main+0x66>
				step_three();
    1bea:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <step_three>
				make_step_one=0;
    1bee:	1d 82       	std	Y+5, r1	; 0x05
				tick=0;
    1bf0:	10 92 70 01 	sts	0x0170, r1
    1bf4:	10 92 71 01 	sts	0x0171, r1
    1bf8:	10 92 72 01 	sts	0x0172, r1
    1bfc:	10 92 73 01 	sts	0x0173, r1
				DcMotor_Rotate(CW,100);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	64 e6       	ldi	r22, 0x64	; 100
    1c04:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
				while(tick<229){
    1c08:	80 91 70 01 	lds	r24, 0x0170
    1c0c:	90 91 71 01 	lds	r25, 0x0171
    1c10:	a0 91 72 01 	lds	r26, 0x0172
    1c14:	b0 91 73 01 	lds	r27, 0x0173
    1c18:	85 3e       	cpi	r24, 0xE5	; 229
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	a1 05       	cpc	r26, r1
    1c1e:	b1 05       	cpc	r27, r1
    1c20:	98 f3       	brcs	.-26     	; 0x1c08 <main+0xcc>
				}
				tick=0;
    1c22:	10 92 70 01 	sts	0x0170, r1
    1c26:	10 92 71 01 	sts	0x0171, r1
    1c2a:	10 92 72 01 	sts	0x0172, r1
    1c2e:	10 92 73 01 	sts	0x0173, r1
				DcMotor_Rotate(STOP,0);
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
				while(tick <46){
    1c3a:	80 91 70 01 	lds	r24, 0x0170
    1c3e:	90 91 71 01 	lds	r25, 0x0171
    1c42:	a0 91 72 01 	lds	r26, 0x0172
    1c46:	b0 91 73 01 	lds	r27, 0x0173
    1c4a:	8e 32       	cpi	r24, 0x2E	; 46
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	a1 05       	cpc	r26, r1
    1c50:	b1 05       	cpc	r27, r1
    1c52:	98 f3       	brcs	.-26     	; 0x1c3a <main+0xfe>
				}
				tick=0;
    1c54:	10 92 70 01 	sts	0x0170, r1
    1c58:	10 92 71 01 	sts	0x0171, r1
    1c5c:	10 92 72 01 	sts	0x0172, r1
    1c60:	10 92 73 01 	sts	0x0173, r1
				DcMotor_Rotate(ACW,100);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	64 e6       	ldi	r22, 0x64	; 100
    1c68:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
				while(tick<229){
    1c6c:	80 91 70 01 	lds	r24, 0x0170
    1c70:	90 91 71 01 	lds	r25, 0x0171
    1c74:	a0 91 72 01 	lds	r26, 0x0172
    1c78:	b0 91 73 01 	lds	r27, 0x0173
    1c7c:	85 3e       	cpi	r24, 0xE5	; 229
    1c7e:	91 05       	cpc	r25, r1
    1c80:	a1 05       	cpc	r26, r1
    1c82:	b1 05       	cpc	r27, r1
    1c84:	98 f3       	brcs	.-26     	; 0x1c6c <main+0x130>
				}
				Timer1_deInit();
    1c86:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Timer1_deInit>
				DcMotor_Rotate(STOP,0);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
    1c92:	87 cf       	rjmp	.-242    	; 0x1ba2 <main+0x66>
			}
		}
		else{
			match=0;
    1c94:	1e 82       	std	Y+6, r1	; 0x06
			UART_sendByte(match);
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
			UART_receiveString(pass);
    1c9c:	8e e7       	ldi	r24, 0x7E	; 126
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
			flag=strcmp(pass,pass_from_memory);
    1ca4:	8e e7       	ldi	r24, 0x7E	; 126
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	28 e7       	ldi	r18, 0x78	; 120
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strcmp>
    1cb2:	8c 83       	std	Y+4, r24	; 0x04
			if(flag==0){
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	88 23       	and	r24, r24
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <main+0x180>
    1cba:	61 c0       	rjmp	.+194    	; 0x1d7e <main+0x242>
				match=1;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	8e 83       	std	Y+6, r24	; 0x06
				UART_sendByte(match);
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
				uint8 number_of_step =UART_recieveByte();
    1cc6:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <UART_recieveByte>
    1cca:	8a 83       	std	Y+2, r24	; 0x02
				if(number_of_step==3){
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <main+0x198>
    1cd2:	67 cf       	rjmp	.-306    	; 0x1ba2 <main+0x66>
					step_three();
    1cd4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <step_three>
					make_step_one=0;
    1cd8:	1d 82       	std	Y+5, r1	; 0x05
					tick=0;
    1cda:	10 92 70 01 	sts	0x0170, r1
    1cde:	10 92 71 01 	sts	0x0171, r1
    1ce2:	10 92 72 01 	sts	0x0172, r1
    1ce6:	10 92 73 01 	sts	0x0173, r1
					DcMotor_Rotate(CW,100);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	64 e6       	ldi	r22, 0x64	; 100
    1cee:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
					while(tick<229){
    1cf2:	80 91 70 01 	lds	r24, 0x0170
    1cf6:	90 91 71 01 	lds	r25, 0x0171
    1cfa:	a0 91 72 01 	lds	r26, 0x0172
    1cfe:	b0 91 73 01 	lds	r27, 0x0173
    1d02:	85 3e       	cpi	r24, 0xE5	; 229
    1d04:	91 05       	cpc	r25, r1
    1d06:	a1 05       	cpc	r26, r1
    1d08:	b1 05       	cpc	r27, r1
    1d0a:	98 f3       	brcs	.-26     	; 0x1cf2 <main+0x1b6>
					}
					tick=0;
    1d0c:	10 92 70 01 	sts	0x0170, r1
    1d10:	10 92 71 01 	sts	0x0171, r1
    1d14:	10 92 72 01 	sts	0x0172, r1
    1d18:	10 92 73 01 	sts	0x0173, r1
					DcMotor_Rotate(STOP,0);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
					while(tick <46){
    1d24:	80 91 70 01 	lds	r24, 0x0170
    1d28:	90 91 71 01 	lds	r25, 0x0171
    1d2c:	a0 91 72 01 	lds	r26, 0x0172
    1d30:	b0 91 73 01 	lds	r27, 0x0173
    1d34:	8e 32       	cpi	r24, 0x2E	; 46
    1d36:	91 05       	cpc	r25, r1
    1d38:	a1 05       	cpc	r26, r1
    1d3a:	b1 05       	cpc	r27, r1
    1d3c:	98 f3       	brcs	.-26     	; 0x1d24 <main+0x1e8>
					}
					tick=0;
    1d3e:	10 92 70 01 	sts	0x0170, r1
    1d42:	10 92 71 01 	sts	0x0171, r1
    1d46:	10 92 72 01 	sts	0x0172, r1
    1d4a:	10 92 73 01 	sts	0x0173, r1
					DcMotor_Rotate(ACW,100);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	64 e6       	ldi	r22, 0x64	; 100
    1d52:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
					while(tick<229){
    1d56:	80 91 70 01 	lds	r24, 0x0170
    1d5a:	90 91 71 01 	lds	r25, 0x0171
    1d5e:	a0 91 72 01 	lds	r26, 0x0172
    1d62:	b0 91 73 01 	lds	r27, 0x0173
    1d66:	85 3e       	cpi	r24, 0xE5	; 229
    1d68:	91 05       	cpc	r25, r1
    1d6a:	a1 05       	cpc	r26, r1
    1d6c:	b1 05       	cpc	r27, r1
    1d6e:	98 f3       	brcs	.-26     	; 0x1d56 <main+0x21a>
					}
					Timer1_deInit();
    1d70:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Timer1_deInit>
					DcMotor_Rotate(STOP,0);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
    1d7c:	12 cf       	rjmp	.-476    	; 0x1ba2 <main+0x66>
				}
			}
			else{
				match=0;
    1d7e:	1e 82       	std	Y+6, r1	; 0x06
				UART_sendByte(match);
    1d80:	8e 81       	ldd	r24, Y+6	; 0x06
    1d82:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
				UART_receiveString(pass);
    1d86:	8e e7       	ldi	r24, 0x7E	; 126
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	0e 94 11 17 	call	0x2e22	; 0x2e22 <UART_receiveString>
				flag=strcmp(pass,pass_from_memory);
    1d8e:	8e e7       	ldi	r24, 0x7E	; 126
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	28 e7       	ldi	r18, 0x78	; 120
    1d94:	31 e0       	ldi	r19, 0x01	; 1
    1d96:	b9 01       	movw	r22, r18
    1d98:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strcmp>
    1d9c:	8c 83       	std	Y+4, r24	; 0x04
				if(flag==0){
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	88 23       	and	r24, r24
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <main+0x26a>
    1da4:	61 c0       	rjmp	.+194    	; 0x1e68 <main+0x32c>
					match=1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	8e 83       	std	Y+6, r24	; 0x06
					UART_sendByte(match);
    1daa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dac:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
					uint8 number_of_step =UART_recieveByte();
    1db0:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <UART_recieveByte>
    1db4:	89 83       	std	Y+1, r24	; 0x01
					if(number_of_step==3){
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <main+0x282>
    1dbc:	f2 ce       	rjmp	.-540    	; 0x1ba2 <main+0x66>
						step_three();
    1dbe:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <step_three>
						make_step_one=0;
    1dc2:	1d 82       	std	Y+5, r1	; 0x05
						tick=0;
    1dc4:	10 92 70 01 	sts	0x0170, r1
    1dc8:	10 92 71 01 	sts	0x0171, r1
    1dcc:	10 92 72 01 	sts	0x0172, r1
    1dd0:	10 92 73 01 	sts	0x0173, r1
						DcMotor_Rotate(CW,100);
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	64 e6       	ldi	r22, 0x64	; 100
    1dd8:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
						while(tick<229){
    1ddc:	80 91 70 01 	lds	r24, 0x0170
    1de0:	90 91 71 01 	lds	r25, 0x0171
    1de4:	a0 91 72 01 	lds	r26, 0x0172
    1de8:	b0 91 73 01 	lds	r27, 0x0173
    1dec:	85 3e       	cpi	r24, 0xE5	; 229
    1dee:	91 05       	cpc	r25, r1
    1df0:	a1 05       	cpc	r26, r1
    1df2:	b1 05       	cpc	r27, r1
    1df4:	98 f3       	brcs	.-26     	; 0x1ddc <main+0x2a0>
						}
						tick=0;
    1df6:	10 92 70 01 	sts	0x0170, r1
    1dfa:	10 92 71 01 	sts	0x0171, r1
    1dfe:	10 92 72 01 	sts	0x0172, r1
    1e02:	10 92 73 01 	sts	0x0173, r1
						DcMotor_Rotate(STOP,0);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
						while(tick <46){
    1e0e:	80 91 70 01 	lds	r24, 0x0170
    1e12:	90 91 71 01 	lds	r25, 0x0171
    1e16:	a0 91 72 01 	lds	r26, 0x0172
    1e1a:	b0 91 73 01 	lds	r27, 0x0173
    1e1e:	8e 32       	cpi	r24, 0x2E	; 46
    1e20:	91 05       	cpc	r25, r1
    1e22:	a1 05       	cpc	r26, r1
    1e24:	b1 05       	cpc	r27, r1
    1e26:	98 f3       	brcs	.-26     	; 0x1e0e <main+0x2d2>
						}
						tick=0;
    1e28:	10 92 70 01 	sts	0x0170, r1
    1e2c:	10 92 71 01 	sts	0x0171, r1
    1e30:	10 92 72 01 	sts	0x0172, r1
    1e34:	10 92 73 01 	sts	0x0173, r1
						DcMotor_Rotate(ACW,100);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	64 e6       	ldi	r22, 0x64	; 100
    1e3c:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
						while(tick<229){
    1e40:	80 91 70 01 	lds	r24, 0x0170
    1e44:	90 91 71 01 	lds	r25, 0x0171
    1e48:	a0 91 72 01 	lds	r26, 0x0172
    1e4c:	b0 91 73 01 	lds	r27, 0x0173
    1e50:	85 3e       	cpi	r24, 0xE5	; 229
    1e52:	91 05       	cpc	r25, r1
    1e54:	a1 05       	cpc	r26, r1
    1e56:	b1 05       	cpc	r27, r1
    1e58:	98 f3       	brcs	.-26     	; 0x1e40 <main+0x304>
						}
						Timer1_deInit();
    1e5a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Timer1_deInit>
						DcMotor_Rotate(STOP,0);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	0e 94 c1 13 	call	0x2782	; 0x2782 <DcMotor_Rotate>
    1e66:	9d ce       	rjmp	.-710    	; 0x1ba2 <main+0x66>
					}
				}
				else{
					match=0;
    1e68:	1e 82       	std	Y+6, r1	; 0x06
					UART_sendByte(match);
    1e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
					make_step_one=0;
    1e70:	1d 82       	std	Y+5, r1	; 0x05
					Buzzer_init();
    1e72:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <Buzzer_init>
					tick=0;
    1e76:	10 92 70 01 	sts	0x0170, r1
    1e7a:	10 92 71 01 	sts	0x0171, r1
    1e7e:	10 92 72 01 	sts	0x0172, r1
    1e82:	10 92 73 01 	sts	0x0173, r1
					Timer1_ConfigType  Config_Ptr_timer;
					Config_Ptr_timer.prescaler = PRE_8;
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	8f 8b       	std	Y+23, r24	; 0x17
					Config_Ptr_timer.compare_value = 0;
    1e8a:	1e 8a       	std	Y+22, r1	; 0x16
    1e8c:	1d 8a       	std	Y+21, r1	; 0x15
					Config_Ptr_timer.initial_value = 0;
    1e8e:	1c 8a       	std	Y+20, r1	; 0x14
    1e90:	1b 8a       	std	Y+19, r1	; 0x13
					Config_Ptr_timer.mode = OVF;
    1e92:	18 8e       	std	Y+24, r1	; 0x18
					Timer1_setCallBack(&buzzer_timer);
    1e94:	87 e1       	ldi	r24, 0x17	; 23
    1e96:	97 e0       	ldi	r25, 0x07	; 7
    1e98:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer1_setCallBack>
					Timer1_init(&Config_Ptr_timer);
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	43 96       	adiw	r24, 0x13	; 19
    1ea0:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Timer1_init>
					Buzzer_on();
    1ea4:	0e 94 75 0f 	call	0x1eea	; 0x1eea <Buzzer_on>
					while(tick<915){
    1ea8:	80 91 70 01 	lds	r24, 0x0170
    1eac:	90 91 71 01 	lds	r25, 0x0171
    1eb0:	a0 91 72 01 	lds	r26, 0x0172
    1eb4:	b0 91 73 01 	lds	r27, 0x0173
    1eb8:	83 39       	cpi	r24, 0x93	; 147
    1eba:	23 e0       	ldi	r18, 0x03	; 3
    1ebc:	92 07       	cpc	r25, r18
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	a2 07       	cpc	r26, r18
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	b2 07       	cpc	r27, r18
    1ec6:	80 f3       	brcs	.-32     	; 0x1ea8 <main+0x36c>
					}
					Buzzer_off();
    1ec8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Buzzer_off>
					Timer1_deInit();
    1ecc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Timer1_deInit>
    1ed0:	68 ce       	rjmp	.-816    	; 0x1ba2 <main+0x66>

00001ed2 <Buzzer_init>:
 */

#include "gpio.h"
#include "buzzer.h"

void Buzzer_init(void){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 2e 10 	call	0x205c	; 0x205c <GPIO_setupPinDirection>
}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <Buzzer_on>:
void Buzzer_on(void){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <Buzzer_off>:
void Buzzer_off(void){
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <EEPROM_writeByte+0x6>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <EEPROM_writeByte+0x8>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1f2c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1f30:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1f34:	88 30       	cpi	r24, 0x08	; 8
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <EEPROM_writeByte+0x22>
        return ERROR;
    1f38:	1c 82       	std	Y+4, r1	; 0x04
    1f3a:	28 c0       	rjmp	.+80     	; 0x1f8c <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	80 70       	andi	r24, 0x00	; 0
    1f42:	97 70       	andi	r25, 0x07	; 7
    1f44:	88 0f       	add	r24, r24
    1f46:	89 2f       	mov	r24, r25
    1f48:	88 1f       	adc	r24, r24
    1f4a:	99 0b       	sbc	r25, r25
    1f4c:	91 95       	neg	r25
    1f4e:	80 6a       	ori	r24, 0xA0	; 160
    1f50:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f54:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1f58:	88 31       	cpi	r24, 0x18	; 24
    1f5a:	11 f0       	breq	.+4      	; 0x1f60 <EEPROM_writeByte+0x46>
        return ERROR;
    1f5c:	1c 82       	std	Y+4, r1	; 0x04
    1f5e:	16 c0       	rjmp	.+44     	; 0x1f8c <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f66:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1f6a:	88 32       	cpi	r24, 0x28	; 40
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <EEPROM_writeByte+0x58>
        return ERROR;
    1f6e:	1c 82       	std	Y+4, r1	; 0x04
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f78:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1f7c:	88 32       	cpi	r24, 0x28	; 40
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <EEPROM_writeByte+0x6a>
        return ERROR;
    1f80:	1c 82       	std	Y+4, r1	; 0x04
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1f84:	0e 94 d6 15 	call	0x2bac	; 0x2bac <TWI_stop>

    return SUCCESS;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <EEPROM_readByte+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <EEPROM_readByte+0x8>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	7c 83       	std	Y+4, r23	; 0x04
    1fb0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1fb2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1fb6:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1fba:	88 30       	cpi	r24, 0x08	; 8
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <EEPROM_readByte+0x26>
        return ERROR;
    1fbe:	1d 82       	std	Y+5, r1	; 0x05
    1fc0:	44 c0       	rjmp	.+136    	; 0x204a <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	80 70       	andi	r24, 0x00	; 0
    1fc8:	97 70       	andi	r25, 0x07	; 7
    1fca:	88 0f       	add	r24, r24
    1fcc:	89 2f       	mov	r24, r25
    1fce:	88 1f       	adc	r24, r24
    1fd0:	99 0b       	sbc	r25, r25
    1fd2:	91 95       	neg	r25
    1fd4:	80 6a       	ori	r24, 0xA0	; 160
    1fd6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1fda:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1fde:	88 31       	cpi	r24, 0x18	; 24
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <EEPROM_readByte+0x4a>
        return ERROR;
    1fe2:	1d 82       	std	Y+5, r1	; 0x05
    1fe4:	32 c0       	rjmp	.+100    	; 0x204a <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1fec:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    1ff0:	88 32       	cpi	r24, 0x28	; 40
    1ff2:	11 f0       	breq	.+4      	; 0x1ff8 <EEPROM_readByte+0x5c>
        return ERROR;
    1ff4:	1d 82       	std	Y+5, r1	; 0x05
    1ff6:	29 c0       	rjmp	.+82     	; 0x204a <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1ff8:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1ffc:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    2000:	80 31       	cpi	r24, 0x10	; 16
    2002:	11 f0       	breq	.+4      	; 0x2008 <EEPROM_readByte+0x6c>
        return ERROR;
    2004:	1d 82       	std	Y+5, r1	; 0x05
    2006:	21 c0       	rjmp	.+66     	; 0x204a <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	80 70       	andi	r24, 0x00	; 0
    200e:	97 70       	andi	r25, 0x07	; 7
    2010:	88 0f       	add	r24, r24
    2012:	89 2f       	mov	r24, r25
    2014:	88 1f       	adc	r24, r24
    2016:	99 0b       	sbc	r25, r25
    2018:	91 95       	neg	r25
    201a:	81 6a       	ori	r24, 0xA1	; 161
    201c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    2020:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    2024:	80 34       	cpi	r24, 0x40	; 64
    2026:	11 f0       	breq	.+4      	; 0x202c <EEPROM_readByte+0x90>
        return ERROR;
    2028:	1d 82       	std	Y+5, r1	; 0x05
    202a:	0f c0       	rjmp	.+30     	; 0x204a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    202c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <TWI_readByteWithNACK>
    2030:	eb 81       	ldd	r30, Y+3	; 0x03
    2032:	fc 81       	ldd	r31, Y+4	; 0x04
    2034:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2036:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <TWI_getStatus>
    203a:	88 35       	cpi	r24, 0x58	; 88
    203c:	11 f0       	breq	.+4      	; 0x2042 <EEPROM_readByte+0xa6>
        return ERROR;
    203e:	1d 82       	std	Y+5, r1	; 0x05
    2040:	04 c0       	rjmp	.+8      	; 0x204a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2042:	0e 94 d6 15 	call	0x2bac	; 0x2bac <TWI_stop>

    return SUCCESS;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <GPIO_setupPinDirection+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_setupPinDirection+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	6a 83       	std	Y+2, r22	; 0x02
    206e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	08 f0       	brcs	.+2      	; 0x2078 <GPIO_setupPinDirection+0x1c>
    2076:	d5 c0       	rjmp	.+426    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	08 f0       	brcs	.+2      	; 0x2080 <GPIO_setupPinDirection+0x24>
    207e:	d1 c0       	rjmp	.+418    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	91 05       	cpc	r25, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <GPIO_setupPinDirection+0x3a>
    2094:	43 c0       	rjmp	.+134    	; 0x211c <GPIO_setupPinDirection+0xc0>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <GPIO_setupPinDirection+0x4e>
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <GPIO_setupPinDirection+0x68>
    20a8:	bc c0       	rjmp	.+376    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
    20aa:	2c 81       	ldd	r18, Y+4	; 0x04
    20ac:	3d 81       	ldd	r19, Y+5	; 0x05
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <GPIO_setupPinDirection+0x5a>
    20b4:	5f c0       	rjmp	.+190    	; 0x2174 <GPIO_setupPinDirection+0x118>
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	83 30       	cpi	r24, 0x03	; 3
    20bc:	91 05       	cpc	r25, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <GPIO_setupPinDirection+0x66>
    20c0:	85 c0       	rjmp	.+266    	; 0x21cc <GPIO_setupPinDirection+0x170>
    20c2:	af c0       	rjmp	.+350    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	a1 f4       	brne	.+40     	; 0x20f2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20ca:	aa e3       	ldi	r26, 0x3A	; 58
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	ea e3       	ldi	r30, 0x3A	; 58
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <GPIO_setupPinDirection+0x8c>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <GPIO_setupPinDirection+0x88>
    20ec:	84 2b       	or	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	98 c0       	rjmp	.+304    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    20f2:	aa e3       	ldi	r26, 0x3A	; 58
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ea e3       	ldi	r30, 0x3A	; 58
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <GPIO_setupPinDirection+0xb4>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <GPIO_setupPinDirection+0xb0>
    2114:	80 95       	com	r24
    2116:	84 23       	and	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	83 c0       	rjmp	.+262    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	a1 f4       	brne	.+40     	; 0x214a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2122:	a7 e3       	ldi	r26, 0x37	; 55
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e3       	ldi	r30, 0x37	; 55
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <GPIO_setupPinDirection+0xe4>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <GPIO_setupPinDirection+0xe0>
    2144:	84 2b       	or	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	6c c0       	rjmp	.+216    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    214a:	a7 e3       	ldi	r26, 0x37	; 55
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e7 e3       	ldi	r30, 0x37	; 55
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <GPIO_setupPinDirection+0x10c>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <GPIO_setupPinDirection+0x108>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	57 c0       	rjmp	.+174    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	a1 f4       	brne	.+40     	; 0x21a2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    217a:	a4 e3       	ldi	r26, 0x34	; 52
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e4 e3       	ldi	r30, 0x34	; 52
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <GPIO_setupPinDirection+0x13c>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <GPIO_setupPinDirection+0x138>
    219c:	84 2b       	or	r24, r20
    219e:	8c 93       	st	X, r24
    21a0:	40 c0       	rjmp	.+128    	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21a2:	a4 e3       	ldi	r26, 0x34	; 52
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e4 e3       	ldi	r30, 0x34	; 52
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <GPIO_setupPinDirection+0x164>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <GPIO_setupPinDirection+0x160>
    21c4:	80 95       	com	r24
    21c6:	84 23       	and	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	2b c0       	rjmp	.+86     	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	a1 f4       	brne	.+40     	; 0x21fa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21d2:	a1 e3       	ldi	r26, 0x31	; 49
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e1 e3       	ldi	r30, 0x31	; 49
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <GPIO_setupPinDirection+0x194>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <GPIO_setupPinDirection+0x190>
    21f4:	84 2b       	or	r24, r20
    21f6:	8c 93       	st	X, r24
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    21fa:	a1 e3       	ldi	r26, 0x31	; 49
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e1 e3       	ldi	r30, 0x31	; 49
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <GPIO_setupPinDirection+0x1bc>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <GPIO_setupPinDirection+0x1b8>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <GPIO_writePin+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <GPIO_writePin+0x8>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	6a 83       	std	Y+2, r22	; 0x02
    2244:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	88 30       	cpi	r24, 0x08	; 8
    224a:	08 f0       	brcs	.+2      	; 0x224e <GPIO_writePin+0x1c>
    224c:	d5 c0       	rjmp	.+426    	; 0x23f8 <GPIO_writePin+0x1c6>
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	08 f0       	brcs	.+2      	; 0x2256 <GPIO_writePin+0x24>
    2254:	d1 c0       	rjmp	.+418    	; 0x23f8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	3d 83       	std	Y+5, r19	; 0x05
    225e:	2c 83       	std	Y+4, r18	; 0x04
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	9d 81       	ldd	r25, Y+5	; 0x05
    2264:	81 30       	cpi	r24, 0x01	; 1
    2266:	91 05       	cpc	r25, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <GPIO_writePin+0x3a>
    226a:	43 c0       	rjmp	.+134    	; 0x22f2 <GPIO_writePin+0xc0>
    226c:	2c 81       	ldd	r18, Y+4	; 0x04
    226e:	3d 81       	ldd	r19, Y+5	; 0x05
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	2c f4       	brge	.+10     	; 0x2280 <GPIO_writePin+0x4e>
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	9d 81       	ldd	r25, Y+5	; 0x05
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	71 f0       	breq	.+28     	; 0x229a <GPIO_writePin+0x68>
    227e:	bc c0       	rjmp	.+376    	; 0x23f8 <GPIO_writePin+0x1c6>
    2280:	2c 81       	ldd	r18, Y+4	; 0x04
    2282:	3d 81       	ldd	r19, Y+5	; 0x05
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <GPIO_writePin+0x5a>
    228a:	5f c0       	rjmp	.+190    	; 0x234a <GPIO_writePin+0x118>
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <GPIO_writePin+0x66>
    2296:	85 c0       	rjmp	.+266    	; 0x23a2 <GPIO_writePin+0x170>
    2298:	af c0       	rjmp	.+350    	; 0x23f8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	a1 f4       	brne	.+40     	; 0x22c8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22a0:	ab e3       	ldi	r26, 0x3B	; 59
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	eb e3       	ldi	r30, 0x3B	; 59
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	48 2f       	mov	r20, r24
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	02 2e       	mov	r0, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <GPIO_writePin+0x8c>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	0a 94       	dec	r0
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <GPIO_writePin+0x88>
    22c2:	84 2b       	or	r24, r20
    22c4:	8c 93       	st	X, r24
    22c6:	98 c0       	rjmp	.+304    	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22c8:	ab e3       	ldi	r26, 0x3B	; 59
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	eb e3       	ldi	r30, 0x3B	; 59
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 2e       	mov	r0, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <GPIO_writePin+0xb4>
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	0a 94       	dec	r0
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <GPIO_writePin+0xb0>
    22ea:	80 95       	com	r24
    22ec:	84 23       	and	r24, r20
    22ee:	8c 93       	st	X, r24
    22f0:	83 c0       	rjmp	.+262    	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	a1 f4       	brne	.+40     	; 0x2320 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    22f8:	a8 e3       	ldi	r26, 0x38	; 56
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e8 e3       	ldi	r30, 0x38	; 56
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	48 2f       	mov	r20, r24
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	02 2e       	mov	r0, r18
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <GPIO_writePin+0xe4>
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	0a 94       	dec	r0
    2318:	e2 f7       	brpl	.-8      	; 0x2312 <GPIO_writePin+0xe0>
    231a:	84 2b       	or	r24, r20
    231c:	8c 93       	st	X, r24
    231e:	6c c0       	rjmp	.+216    	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2320:	a8 e3       	ldi	r26, 0x38	; 56
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e8 e3       	ldi	r30, 0x38	; 56
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <GPIO_writePin+0x10c>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <GPIO_writePin+0x108>
    2342:	80 95       	com	r24
    2344:	84 23       	and	r24, r20
    2346:	8c 93       	st	X, r24
    2348:	57 c0       	rjmp	.+174    	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	a1 f4       	brne	.+40     	; 0x2378 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2350:	a5 e3       	ldi	r26, 0x35	; 53
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e3       	ldi	r30, 0x35	; 53
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	48 2f       	mov	r20, r24
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	02 2e       	mov	r0, r18
    2368:	02 c0       	rjmp	.+4      	; 0x236e <GPIO_writePin+0x13c>
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	0a 94       	dec	r0
    2370:	e2 f7       	brpl	.-8      	; 0x236a <GPIO_writePin+0x138>
    2372:	84 2b       	or	r24, r20
    2374:	8c 93       	st	X, r24
    2376:	40 c0       	rjmp	.+128    	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2378:	a5 e3       	ldi	r26, 0x35	; 53
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e5 e3       	ldi	r30, 0x35	; 53
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	48 2f       	mov	r20, r24
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <GPIO_writePin+0x164>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <GPIO_writePin+0x160>
    239a:	80 95       	com	r24
    239c:	84 23       	and	r24, r20
    239e:	8c 93       	st	X, r24
    23a0:	2b c0       	rjmp	.+86     	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	81 30       	cpi	r24, 0x01	; 1
    23a6:	a1 f4       	brne	.+40     	; 0x23d0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23a8:	a2 e3       	ldi	r26, 0x32	; 50
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e2 e3       	ldi	r30, 0x32	; 50
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	48 2f       	mov	r20, r24
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	02 2e       	mov	r0, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <GPIO_writePin+0x194>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	0a 94       	dec	r0
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <GPIO_writePin+0x190>
    23ca:	84 2b       	or	r24, r20
    23cc:	8c 93       	st	X, r24
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    23d0:	a2 e3       	ldi	r26, 0x32	; 50
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e2 e3       	ldi	r30, 0x32	; 50
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <GPIO_writePin+0x1bc>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <GPIO_writePin+0x1b8>
    23f2:	80 95       	com	r24
    23f4:	84 23       	and	r24, r20
    23f6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <GPIO_readPin+0x6>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <GPIO_readPin+0x8>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8a 83       	std	Y+2, r24	; 0x02
    2418:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    241a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	88 30       	cpi	r24, 0x08	; 8
    2420:	08 f0       	brcs	.+2      	; 0x2424 <GPIO_readPin+0x1c>
    2422:	84 c0       	rjmp	.+264    	; 0x252c <GPIO_readPin+0x124>
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	08 f0       	brcs	.+2      	; 0x242c <GPIO_readPin+0x24>
    242a:	80 c0       	rjmp	.+256    	; 0x252c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	3d 83       	std	Y+5, r19	; 0x05
    2434:	2c 83       	std	Y+4, r18	; 0x04
    2436:	4c 81       	ldd	r20, Y+4	; 0x04
    2438:	5d 81       	ldd	r21, Y+5	; 0x05
    243a:	41 30       	cpi	r20, 0x01	; 1
    243c:	51 05       	cpc	r21, r1
    243e:	79 f1       	breq	.+94     	; 0x249e <GPIO_readPin+0x96>
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	34 f4       	brge	.+12     	; 0x2456 <GPIO_readPin+0x4e>
    244a:	2c 81       	ldd	r18, Y+4	; 0x04
    244c:	3d 81       	ldd	r19, Y+5	; 0x05
    244e:	21 15       	cp	r18, r1
    2450:	31 05       	cpc	r19, r1
    2452:	69 f0       	breq	.+26     	; 0x246e <GPIO_readPin+0x66>
    2454:	6b c0       	rjmp	.+214    	; 0x252c <GPIO_readPin+0x124>
    2456:	4c 81       	ldd	r20, Y+4	; 0x04
    2458:	5d 81       	ldd	r21, Y+5	; 0x05
    245a:	42 30       	cpi	r20, 0x02	; 2
    245c:	51 05       	cpc	r21, r1
    245e:	b9 f1       	breq	.+110    	; 0x24ce <GPIO_readPin+0xc6>
    2460:	8c 81       	ldd	r24, Y+4	; 0x04
    2462:	9d 81       	ldd	r25, Y+5	; 0x05
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	91 05       	cpc	r25, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <GPIO_readPin+0x64>
    246a:	49 c0       	rjmp	.+146    	; 0x24fe <GPIO_readPin+0xf6>
    246c:	5f c0       	rjmp	.+190    	; 0x252c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    246e:	e9 e3       	ldi	r30, 0x39	; 57
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <GPIO_readPin+0x7e>
    2482:	55 95       	asr	r21
    2484:	47 95       	ror	r20
    2486:	8a 95       	dec	r24
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <GPIO_readPin+0x7a>
    248a:	ca 01       	movw	r24, r20
    248c:	81 70       	andi	r24, 0x01	; 1
    248e:	90 70       	andi	r25, 0x00	; 0
    2490:	88 23       	and	r24, r24
    2492:	19 f0       	breq	.+6      	; 0x249a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	49 c0       	rjmp	.+146    	; 0x252c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    249a:	19 82       	std	Y+1, r1	; 0x01
    249c:	47 c0       	rjmp	.+142    	; 0x252c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    249e:	e6 e3       	ldi	r30, 0x36	; 54
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a9 01       	movw	r20, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <GPIO_readPin+0xae>
    24b2:	55 95       	asr	r21
    24b4:	47 95       	ror	r20
    24b6:	8a 95       	dec	r24
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <GPIO_readPin+0xaa>
    24ba:	ca 01       	movw	r24, r20
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	88 23       	and	r24, r24
    24c2:	19 f0       	breq	.+6      	; 0x24ca <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	31 c0       	rjmp	.+98     	; 0x252c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	2f c0       	rjmp	.+94     	; 0x252c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    24ce:	e3 e3       	ldi	r30, 0x33	; 51
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a9 01       	movw	r20, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <GPIO_readPin+0xde>
    24e2:	55 95       	asr	r21
    24e4:	47 95       	ror	r20
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <GPIO_readPin+0xda>
    24ea:	ca 01       	movw	r24, r20
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	88 23       	and	r24, r24
    24f2:	19 f0       	breq	.+6      	; 0x24fa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	19 c0       	rjmp	.+50     	; 0x252c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	17 c0       	rjmp	.+46     	; 0x252c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    24fe:	e0 e3       	ldi	r30, 0x30	; 48
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <GPIO_readPin+0x10e>
    2512:	55 95       	asr	r21
    2514:	47 95       	ror	r20
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <GPIO_readPin+0x10a>
    251a:	ca 01       	movw	r24, r20
    251c:	81 70       	andi	r24, 0x01	; 1
    251e:	90 70       	andi	r25, 0x00	; 0
    2520:	88 23       	and	r24, r24
    2522:	19 f0       	breq	.+6      	; 0x252a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	01 c0       	rjmp	.+2      	; 0x252c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    252a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <GPIO_setupPortDirection+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <GPIO_setupPortDirection+0x8>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	84 30       	cpi	r24, 0x04	; 4
    2552:	90 f5       	brcc	.+100    	; 0x25b8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3c 83       	std	Y+4, r19	; 0x04
    255c:	2b 83       	std	Y+3, r18	; 0x03
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	91 05       	cpc	r25, r1
    2566:	d1 f0       	breq	.+52     	; 0x259c <GPIO_setupPortDirection+0x5e>
    2568:	2b 81       	ldd	r18, Y+3	; 0x03
    256a:	3c 81       	ldd	r19, Y+4	; 0x04
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	2c f4       	brge	.+10     	; 0x257c <GPIO_setupPortDirection+0x3e>
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	61 f0       	breq	.+24     	; 0x2592 <GPIO_setupPortDirection+0x54>
    257a:	1e c0       	rjmp	.+60     	; 0x25b8 <GPIO_setupPortDirection+0x7a>
    257c:	2b 81       	ldd	r18, Y+3	; 0x03
    257e:	3c 81       	ldd	r19, Y+4	; 0x04
    2580:	22 30       	cpi	r18, 0x02	; 2
    2582:	31 05       	cpc	r19, r1
    2584:	81 f0       	breq	.+32     	; 0x25a6 <GPIO_setupPortDirection+0x68>
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	83 30       	cpi	r24, 0x03	; 3
    258c:	91 05       	cpc	r25, r1
    258e:	81 f0       	breq	.+32     	; 0x25b0 <GPIO_setupPortDirection+0x72>
    2590:	13 c0       	rjmp	.+38     	; 0x25b8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2592:	ea e3       	ldi	r30, 0x3A	; 58
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	80 83       	st	Z, r24
    259a:	0e c0       	rjmp	.+28     	; 0x25b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    259c:	e7 e3       	ldi	r30, 0x37	; 55
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	80 83       	st	Z, r24
    25a4:	09 c0       	rjmp	.+18     	; 0x25b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25a6:	e4 e3       	ldi	r30, 0x34	; 52
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	80 83       	st	Z, r24
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25b0:	e1 e3       	ldi	r30, 0x31	; 49
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <GPIO_writePort+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <GPIO_writePort+0x8>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	84 30       	cpi	r24, 0x04	; 4
    25da:	90 f5       	brcc	.+100    	; 0x2640 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3c 83       	std	Y+4, r19	; 0x04
    25e4:	2b 83       	std	Y+3, r18	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	91 05       	cpc	r25, r1
    25ee:	d1 f0       	breq	.+52     	; 0x2624 <GPIO_writePort+0x5e>
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	3c 81       	ldd	r19, Y+4	; 0x04
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	2c f4       	brge	.+10     	; 0x2604 <GPIO_writePort+0x3e>
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	61 f0       	breq	.+24     	; 0x261a <GPIO_writePort+0x54>
    2602:	1e c0       	rjmp	.+60     	; 0x2640 <GPIO_writePort+0x7a>
    2604:	2b 81       	ldd	r18, Y+3	; 0x03
    2606:	3c 81       	ldd	r19, Y+4	; 0x04
    2608:	22 30       	cpi	r18, 0x02	; 2
    260a:	31 05       	cpc	r19, r1
    260c:	81 f0       	breq	.+32     	; 0x262e <GPIO_writePort+0x68>
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	91 05       	cpc	r25, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <GPIO_writePort+0x72>
    2618:	13 c0       	rjmp	.+38     	; 0x2640 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    261a:	eb e3       	ldi	r30, 0x3B	; 59
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	80 83       	st	Z, r24
    2622:	0e c0       	rjmp	.+28     	; 0x2640 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2624:	e8 e3       	ldi	r30, 0x38	; 56
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	80 83       	st	Z, r24
    262c:	09 c0       	rjmp	.+18     	; 0x2640 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    262e:	e5 e3       	ldi	r30, 0x35	; 53
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	80 83       	st	Z, r24
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2638:	e2 e3       	ldi	r30, 0x32	; 50
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <GPIO_readPort+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <GPIO_readPort+0x8>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    265c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	84 30       	cpi	r24, 0x04	; 4
    2662:	90 f5       	brcc	.+100    	; 0x26c8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	3c 83       	std	Y+4, r19	; 0x04
    266c:	2b 83       	std	Y+3, r18	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	91 05       	cpc	r25, r1
    2676:	d1 f0       	breq	.+52     	; 0x26ac <GPIO_readPort+0x5e>
    2678:	2b 81       	ldd	r18, Y+3	; 0x03
    267a:	3c 81       	ldd	r19, Y+4	; 0x04
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	2c f4       	brge	.+10     	; 0x268c <GPIO_readPort+0x3e>
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	61 f0       	breq	.+24     	; 0x26a2 <GPIO_readPort+0x54>
    268a:	1e c0       	rjmp	.+60     	; 0x26c8 <GPIO_readPort+0x7a>
    268c:	2b 81       	ldd	r18, Y+3	; 0x03
    268e:	3c 81       	ldd	r19, Y+4	; 0x04
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	81 f0       	breq	.+32     	; 0x26b6 <GPIO_readPort+0x68>
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	91 05       	cpc	r25, r1
    269e:	81 f0       	breq	.+32     	; 0x26c0 <GPIO_readPort+0x72>
    26a0:	13 c0       	rjmp	.+38     	; 0x26c8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    26a2:	e9 e3       	ldi	r30, 0x39	; 57
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	0e c0       	rjmp	.+28     	; 0x26c8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    26ac:	e6 e3       	ldi	r30, 0x36	; 54
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    26b6:	e3 e3       	ldi	r30, 0x33	; 51
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    26c0:	e0 e3       	ldi	r30, 0x30	; 48
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <set_motor>:
#include "motor.h"
#include "gpio.h"
#include "pwm.h"
#include "timer1.h"

void set_motor(void){
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	tick++;
    26e0:	80 91 70 01 	lds	r24, 0x0170
    26e4:	90 91 71 01 	lds	r25, 0x0171
    26e8:	a0 91 72 01 	lds	r26, 0x0172
    26ec:	b0 91 73 01 	lds	r27, 0x0173
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	a1 1d       	adc	r26, r1
    26f4:	b1 1d       	adc	r27, r1
    26f6:	80 93 70 01 	sts	0x0170, r24
    26fa:	90 93 71 01 	sts	0x0171, r25
    26fe:	a0 93 72 01 	sts	0x0172, r26
    2702:	b0 93 73 01 	sts	0x0173, r27
}
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <DcMotor_Init>:

void DcMotor_Init(void){
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <DcMotor_Init+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <DcMotor_Init+0x8>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <DcMotor_Init+0xa>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
	/*configure three pins as output*/
	GPIO_setupPinDirection(PORT_INPUT1_ID, PIN_INPUT1_ID,PIN_OUTPUT);
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 2e 10 	call	0x205c	; 0x205c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_INPUT2_ID,PIN_INPUT2_ID,PIN_OUTPUT);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 2e 10 	call	0x205c	; 0x205c <GPIO_setupPinDirection>
	/*STOP DC motor*/
	GPIO_writePin(PORT_INPUT1_ID,  PIN_INPUT1_ID, LOGIC_LOW);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
	GPIO_writePin(PORT_INPUT2_ID,  PIN_INPUT2_ID, LOGIC_LOW);
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>

	/*set timmer one*/
	tick=0;
    2742:	10 92 70 01 	sts	0x0170, r1
    2746:	10 92 71 01 	sts	0x0171, r1
    274a:	10 92 72 01 	sts	0x0172, r1
    274e:	10 92 73 01 	sts	0x0173, r1
	Timer1_ConfigType  Config_Ptr_timer;
	Config_Ptr_timer.prescaler = PRE_8;
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	8d 83       	std	Y+5, r24	; 0x05
	Config_Ptr_timer.compare_value = 0;
    2756:	1c 82       	std	Y+4, r1	; 0x04
    2758:	1b 82       	std	Y+3, r1	; 0x03
	Config_Ptr_timer.initial_value = 0;
    275a:	1a 82       	std	Y+2, r1	; 0x02
    275c:	19 82       	std	Y+1, r1	; 0x01
	Config_Ptr_timer.mode = OVF;
    275e:	1e 82       	std	Y+6, r1	; 0x06
	Timer1_setCallBack(&set_motor);
    2760:	8c e6       	ldi	r24, 0x6C	; 108
    2762:	93 e1       	ldi	r25, 0x13	; 19
    2764:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Timer1_setCallBack>
	Timer1_init(&Config_Ptr_timer);
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Timer1_init>

}
    2770:	26 96       	adiw	r28, 0x06	; 6
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <DcMotor_Rotate+0x6>
    2788:	00 d0       	rcall	.+0      	; 0x278a <DcMotor_Rotate+0x8>
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	3c 83       	std	Y+4, r19	; 0x04
    279a:	2b 83       	std	Y+3, r18	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	91 05       	cpc	r25, r1
    27a4:	a1 f0       	breq	.+40     	; 0x27ce <DcMotor_Rotate+0x4c>
    27a6:	2b 81       	ldd	r18, Y+3	; 0x03
    27a8:	3c 81       	ldd	r19, Y+4	; 0x04
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	d1 f0       	breq	.+52     	; 0x27e4 <DcMotor_Rotate+0x62>
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	01 f5       	brne	.+64     	; 0x27f8 <DcMotor_Rotate+0x76>
		case STOP:  // IN1 = 0  , IN2 = 0
				GPIO_writePin(PORT_INPUT1_ID,  PIN_INPUT1_ID, LOGIC_LOW);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
				GPIO_writePin(PORT_INPUT2_ID,  PIN_INPUT2_ID, LOGIC_LOW);
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	62 e0       	ldi	r22, 0x02	; 2
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
    27cc:	15 c0       	rjmp	.+42     	; 0x27f8 <DcMotor_Rotate+0x76>
				break;
		case CW:  // IN1 = 0  , IN2 = 1
				GPIO_writePin(PORT_INPUT1_ID,  PIN_INPUT1_ID, LOGIC_LOW);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
				GPIO_writePin(PORT_INPUT2_ID,  PIN_INPUT2_ID, LOGIC_HIGH);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	62 e0       	ldi	r22, 0x02	; 2
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
    27e2:	0a c0       	rjmp	.+20     	; 0x27f8 <DcMotor_Rotate+0x76>
				break;
		case ACW:  // IN1 = 1  , IN2 = 0
				GPIO_writePin(PORT_INPUT1_ID,  PIN_INPUT1_ID, LOGIC_HIGH);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	61 e0       	ldi	r22, 0x01	; 1
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
				GPIO_writePin(PORT_INPUT2_ID,  PIN_INPUT2_ID, LOGIC_LOW);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	62 e0       	ldi	r22, 0x02	; 2
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 19 11 	call	0x2232	; 0x2232 <GPIO_writePin>
				break;
	}
	PWM_Timer0_Start(speed);
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	0e 94 06 14 	call	0x280c	; 0x280c <PWM_Timer0_Start>
}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <PWM_Timer0_Start>:
 */
#include <avr/io.h>
#include "gpio.h"
#include "pwm.h"
void PWM_Timer0_Start(uint8 set_duty_cycle)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);        // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	63 e0       	ldi	r22, 0x03	; 3
    2820:	41 e0       	ldi	r20, 0x01	; 1
    2822:	0e 94 2e 10 	call	0x205c	; 0x205c <GPIO_setupPinDirection>
	TCNT0 = 0;                                                // Set Timer Initial Value to 0
    2826:	e2 e5       	ldi	r30, 0x52	; 82
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	10 82       	st	Z, r1
	OCR0  = (((float)set_duty_cycle/100)*255);                                 //Set Compare value
    282c:	0c e5       	ldi	r16, 0x5C	; 92
    282e:	10 e0       	ldi	r17, 0x00	; 0
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e0       	ldi	r26, 0x00	; 0
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	48 ec       	ldi	r20, 0xC8	; 200
    2850:	52 e4       	ldi	r21, 0x42	; 66
    2852:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	53 e4       	ldi	r21, 0x43	; 67
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    287e:	e3 e5       	ldi	r30, 0x53	; 83
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	8a e6       	ldi	r24, 0x6A	; 106
    2884:	80 83       	st	Z, r24
}
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <__vector_7>:

static volatile Timer1_ConfigType* Config_Ptr_static;
static volatile void(*g_Timer1_Call_Back_Ptr)(void);
volatile uint32 tick=0;

ISR(TIMER1_COMPA_vect){
    2892:	1f 92       	push	r1
    2894:	0f 92       	push	r0
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	0f 92       	push	r0
    289a:	11 24       	eor	r1, r1
    289c:	2f 93       	push	r18
    289e:	3f 93       	push	r19
    28a0:	4f 93       	push	r20
    28a2:	5f 93       	push	r21
    28a4:	6f 93       	push	r22
    28a6:	7f 93       	push	r23
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
    28b0:	ef 93       	push	r30
    28b2:	ff 93       	push	r31
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
	TCNT1=Config_Ptr_static->initial_value;
    28bc:	ac e4       	ldi	r26, 0x4C	; 76
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e0 91 74 01 	lds	r30, 0x0174
    28c4:	f0 91 75 01 	lds	r31, 0x0175
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	8e 93       	st	-X, r24
	(*g_Timer1_Call_Back_Ptr)();
    28d2:	e0 91 76 01 	lds	r30, 0x0176
    28d6:	f0 91 77 01 	lds	r31, 0x0177
    28da:	09 95       	icall
}
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	ff 91       	pop	r31
    28e2:	ef 91       	pop	r30
    28e4:	bf 91       	pop	r27
    28e6:	af 91       	pop	r26
    28e8:	9f 91       	pop	r25
    28ea:	8f 91       	pop	r24
    28ec:	7f 91       	pop	r23
    28ee:	6f 91       	pop	r22
    28f0:	5f 91       	pop	r21
    28f2:	4f 91       	pop	r20
    28f4:	3f 91       	pop	r19
    28f6:	2f 91       	pop	r18
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti

00002902 <__vector_8>:
ISR(TIMER1_COMPB_vect){
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	TCNT1=Config_Ptr_static->initial_value;
    292c:	ac e4       	ldi	r26, 0x4C	; 76
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e0 91 74 01 	lds	r30, 0x0174
    2934:	f0 91 75 01 	lds	r31, 0x0175
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	11 96       	adiw	r26, 0x01	; 1
    293e:	9c 93       	st	X, r25
    2940:	8e 93       	st	-X, r24
	(*g_Timer1_Call_Back_Ptr)();
    2942:	e0 91 76 01 	lds	r30, 0x0176
    2946:	f0 91 77 01 	lds	r31, 0x0177
    294a:	09 95       	icall
}
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	ff 91       	pop	r31
    2952:	ef 91       	pop	r30
    2954:	bf 91       	pop	r27
    2956:	af 91       	pop	r26
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	7f 91       	pop	r23
    295e:	6f 91       	pop	r22
    2960:	5f 91       	pop	r21
    2962:	4f 91       	pop	r20
    2964:	3f 91       	pop	r19
    2966:	2f 91       	pop	r18
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	0f 90       	pop	r0
    296e:	1f 90       	pop	r1
    2970:	18 95       	reti

00002972 <__vector_9>:
ISR(TIMER1_OVF_vect){
    2972:	1f 92       	push	r1
    2974:	0f 92       	push	r0
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	0f 92       	push	r0
    297a:	11 24       	eor	r1, r1
    297c:	2f 93       	push	r18
    297e:	3f 93       	push	r19
    2980:	4f 93       	push	r20
    2982:	5f 93       	push	r21
    2984:	6f 93       	push	r22
    2986:	7f 93       	push	r23
    2988:	8f 93       	push	r24
    298a:	9f 93       	push	r25
    298c:	af 93       	push	r26
    298e:	bf 93       	push	r27
    2990:	ef 93       	push	r30
    2992:	ff 93       	push	r31
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	TCNT1=Config_Ptr_static->initial_value;
    299c:	ac e4       	ldi	r26, 0x4C	; 76
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e0 91 74 01 	lds	r30, 0x0174
    29a4:	f0 91 75 01 	lds	r31, 0x0175
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	11 96       	adiw	r26, 0x01	; 1
    29ae:	9c 93       	st	X, r25
    29b0:	8e 93       	st	-X, r24
	(*g_Timer1_Call_Back_Ptr)();
    29b2:	e0 91 76 01 	lds	r30, 0x0176
    29b6:	f0 91 77 01 	lds	r31, 0x0177
    29ba:	09 95       	icall

}
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	ff 91       	pop	r31
    29c2:	ef 91       	pop	r30
    29c4:	bf 91       	pop	r27
    29c6:	af 91       	pop	r26
    29c8:	9f 91       	pop	r25
    29ca:	8f 91       	pop	r24
    29cc:	7f 91       	pop	r23
    29ce:	6f 91       	pop	r22
    29d0:	5f 91       	pop	r21
    29d2:	4f 91       	pop	r20
    29d4:	3f 91       	pop	r19
    29d6:	2f 91       	pop	r18
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <Timer1_init+0x6>
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	Config_Ptr_static=Config_Ptr;
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	90 93 75 01 	sts	0x0175, r25
    29f8:	80 93 74 01 	sts	0x0174, r24
	TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    29fc:	ef e4       	ldi	r30, 0x4F	; 79
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	8c e0       	ldi	r24, 0x0C	; 12
    2a02:	80 83       	st	Z, r24
	if(Config_Ptr->mode==CTC_TOP_OCR1A){
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	85 81       	ldd	r24, Z+5	; 0x05
    2a0a:	84 30       	cpi	r24, 0x04	; 4
    2a0c:	39 f4       	brne	.+14     	; 0x2a1c <Timer1_init+0x3a>
		TCCR1B|=(1<<WGM12);
    2a0e:	ae e4       	ldi	r26, 0x4E	; 78
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	88 60       	ori	r24, 0x08	; 8
    2a1a:	8c 93       	st	X, r24
	}
	if(Config_Ptr->mode==CTC_ICR1){
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	85 81       	ldd	r24, Z+5	; 0x05
    2a22:	8c 30       	cpi	r24, 0x0C	; 12
    2a24:	71 f4       	brne	.+28     	; 0x2a42 <Timer1_init+0x60>
		TCCR1B|=(1<<WGM12);
    2a26:	ae e4       	ldi	r26, 0x4E	; 78
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ee e4       	ldi	r30, 0x4E	; 78
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	88 60       	ori	r24, 0x08	; 8
    2a32:	8c 93       	st	X, r24
		TCCR1B|=(1<<WGM13);
    2a34:	ae e4       	ldi	r26, 0x4E	; 78
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	ee e4       	ldi	r30, 0x4E	; 78
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 61       	ori	r24, 0x10	; 16
    2a40:	8c 93       	st	X, r24
	}
	TCCR1B=Config_Ptr->prescaler;
    2a42:	ae e4       	ldi	r26, 0x4E	; 78
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e9 81       	ldd	r30, Y+1	; 0x01
    2a48:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4a:	84 81       	ldd	r24, Z+4	; 0x04
    2a4c:	8c 93       	st	X, r24
	TCNT1=Config_Ptr->initial_value;
    2a4e:	ac e4       	ldi	r26, 0x4C	; 76
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	11 96       	adiw	r26, 0x01	; 1
    2a5c:	9c 93       	st	X, r25
    2a5e:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==CTC_TOP_OCR1A){
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	85 81       	ldd	r24, Z+5	; 0x05
    2a66:	84 30       	cpi	r24, 0x04	; 4
    2a68:	51 f4       	brne	.+20     	; 0x2a7e <Timer1_init+0x9c>
		OCR1A=Config_Ptr->compare_value;
    2a6a:	ea e4       	ldi	r30, 0x4A	; 74
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	a9 81       	ldd	r26, Y+1	; 0x01
    2a70:	ba 81       	ldd	r27, Y+2	; 0x02
    2a72:	12 96       	adiw	r26, 0x02	; 2
    2a74:	8d 91       	ld	r24, X+
    2a76:	9c 91       	ld	r25, X
    2a78:	13 97       	sbiw	r26, 0x03	; 3
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
	}
	if(Config_Ptr->mode==CTC_ICR1){
    2a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a80:	fa 81       	ldd	r31, Y+2	; 0x02
    2a82:	85 81       	ldd	r24, Z+5	; 0x05
    2a84:	8c 30       	cpi	r24, 0x0C	; 12
    2a86:	51 f4       	brne	.+20     	; 0x2a9c <Timer1_init+0xba>
		ICR1=Config_Ptr->compare_value;
    2a88:	e6 e4       	ldi	r30, 0x46	; 70
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	a9 81       	ldd	r26, Y+1	; 0x01
    2a8e:	ba 81       	ldd	r27, Y+2	; 0x02
    2a90:	12 96       	adiw	r26, 0x02	; 2
    2a92:	8d 91       	ld	r24, X+
    2a94:	9c 91       	ld	r25, X
    2a96:	13 97       	sbiw	r26, 0x03	; 3
    2a98:	91 83       	std	Z+1, r25	; 0x01
    2a9a:	80 83       	st	Z, r24
	}
	if(Config_Ptr->mode==CTC_ICR1||Config_Ptr->mode==CTC_TOP_OCR1A){
    2a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa0:	85 81       	ldd	r24, Z+5	; 0x05
    2aa2:	8c 30       	cpi	r24, 0x0C	; 12
    2aa4:	29 f0       	breq	.+10     	; 0x2ab0 <Timer1_init+0xce>
    2aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aaa:	85 81       	ldd	r24, Z+5	; 0x05
    2aac:	84 30       	cpi	r24, 0x04	; 4
    2aae:	41 f4       	brne	.+16     	; 0x2ac0 <Timer1_init+0xde>
		TIMSK|=(1<<OCIE1A);
    2ab0:	a9 e5       	ldi	r26, 0x59	; 89
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	e9 e5       	ldi	r30, 0x59	; 89
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 61       	ori	r24, 0x10	; 16
    2abc:	8c 93       	st	X, r24
    2abe:	07 c0       	rjmp	.+14     	; 0x2ace <Timer1_init+0xec>
	}
	else{
		TIMSK|=(1<<TOIE1);
    2ac0:	a9 e5       	ldi	r26, 0x59	; 89
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 e5       	ldi	r30, 0x59	; 89
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	84 60       	ori	r24, 0x04	; 4
    2acc:	8c 93       	st	X, r24
	}

}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Timer1_deInit>:
void Timer1_deInit(void){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	10 82       	st	Z, r1
	TCNT1=0;
    2ae6:	ec e4       	ldi	r30, 0x4C	; 76
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	11 82       	std	Z+1, r1	; 0x01
    2aec:	10 82       	st	Z, r1

}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void)){
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <Timer1_setCallBack+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr=a_ptr;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	90 93 77 01 	sts	0x0177, r25
    2b0a:	80 93 76 01 	sts	0x0176, r24
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <TWI_init+0x6>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <TWI_init+0x8>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

	TWSR = 0x00;
    2b28:	e1 e2       	ldi	r30, 0x21	; 33
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	10 82       	st	Z, r1
	int twbr=(((F_CPU/Config_Ptr->bit_rate)-16)/2);
    2b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b30:	fc 81       	ldd	r31, Y+4	; 0x04
    2b32:	21 81       	ldd	r18, Z+1	; 0x01
    2b34:	32 81       	ldd	r19, Z+2	; 0x02
    2b36:	43 81       	ldd	r20, Z+3	; 0x03
    2b38:	54 81       	ldd	r21, Z+4	; 0x04
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	92 e1       	ldi	r25, 0x12	; 18
    2b3e:	aa e7       	ldi	r26, 0x7A	; 122
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	bc 01       	movw	r22, r24
    2b44:	cd 01       	movw	r24, r26
    2b46:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodsi4>
    2b4a:	da 01       	movw	r26, r20
    2b4c:	c9 01       	movw	r24, r18
    2b4e:	40 97       	sbiw	r24, 0x10	; 16
    2b50:	a1 09       	sbc	r26, r1
    2b52:	b1 09       	sbc	r27, r1
    2b54:	b6 95       	lsr	r27
    2b56:	a7 95       	ror	r26
    2b58:	97 95       	ror	r25
    2b5a:	87 95       	ror	r24
    2b5c:	9a 83       	std	Y+2, r25	; 0x02
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	TWBR = twbr;
    2b60:	e0 e2       	ldi	r30, 0x20	; 32
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	80 83       	st	Z, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)

       + General Call Recognition: Off */

    TWAR =((Config_Ptr->address)<<1); // my address = 0x01 :)
    2b68:	a2 e2       	ldi	r26, 0x22	; 34
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b70:	80 81       	ld	r24, Z
    2b72:	88 0f       	add	r24, r24
    2b74:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2b76:	e6 e5       	ldi	r30, 0x56	; 86
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	80 83       	st	Z, r24
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <TWI_start>:

void TWI_start(void)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62

	 * send the start bit by TWSTA=1

	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b94:	e6 e5       	ldi	r30, 0x56	; 86
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	84 ea       	ldi	r24, 0xA4	; 164
    2b9a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b9c:	e6 e5       	ldi	r30, 0x56	; 86
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 23       	and	r24, r24
    2ba4:	dc f7       	brge	.-10     	; 0x2b9c <TWI_start+0x10>
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <TWI_stop>:

void TWI_stop(void)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	 * send the stop bit by TWSTO=1

	 * Enable TWI Module TWEN=1 
	 */

    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2bb4:	e6 e5       	ldi	r30, 0x56	; 86
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	84 e9       	ldi	r24, 0x94	; 148
    2bba:	80 83       	st	Z, r24
}
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    	TWDR = data;
    2bce:	e3 e2       	ldi	r30, 0x23	; 35
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1

	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2bd6:	e6 e5       	ldi	r30, 0x56	; 86
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	84 e8       	ldi	r24, 0x84	; 132
    2bdc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bde:	e6 e5       	ldi	r30, 0x56	; 86
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	88 23       	and	r24, r24
    2be6:	dc f7       	brge	.-10     	; 0x2bde <TWI_writeByte+0x1c>
}
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62

	 * Enable sending ACK after reading or receiving data TWEA=1

	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2bf8:	e6 e5       	ldi	r30, 0x56	; 86
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	84 ec       	ldi	r24, 0xC4	; 196
    2bfe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c00:	e6 e5       	ldi	r30, 0x56	; 86
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	88 23       	and	r24, r24
    2c08:	dc f7       	brge	.-10     	; 0x2c00 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2c0a:	e3 e2       	ldi	r30, 0x23	; 35
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1

	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c1e:	e6 e5       	ldi	r30, 0x56	; 86
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	84 e8       	ldi	r24, 0x84	; 132
    2c24:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c26:	e6 e5       	ldi	r30, 0x56	; 86
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	88 23       	and	r24, r24
    2c2e:	dc f7       	brge	.-10     	; 0x2c26 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2c30:	e3 e2       	ldi	r30, 0x23	; 35
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
}
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	0f 92       	push	r0
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2c46:	e1 e2       	ldi	r30, 0x21	; 33
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 7f       	andi	r24, 0xF8	; 248
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <UART_init+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <UART_init+0x8>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
    2c6c:	19 82       	std	Y+1, r1	; 0x01
	/************************** UCSRA Description ***************************/
	              /* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c6e:	eb e2       	ldi	r30, 0x2B	; 43
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode used as nine data bit
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c76:	ea e2       	ldi	r30, 0x2A	; 42
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	88 e1       	ldi	r24, 0x18	; 24
    2c7c:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==NINE_DATA_BIT){
    2c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c80:	fc 81       	ldd	r31, Y+4	; 0x04
    2c82:	80 81       	ld	r24, Z
    2c84:	87 30       	cpi	r24, 0x07	; 7
    2c86:	39 f4       	brne	.+14     	; 0x2c96 <UART_init+0x3c>
		UCSRB|= (1<<UCSZ2);
    2c88:	aa e2       	ldi	r26, 0x2A	; 42
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ea e2       	ldi	r30, 0x2A	; 42
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	84 60       	ori	r24, 0x04	; 4
    2c94:	8c 93       	st	X, r24
	 * UPM1:0  = take from structure Disable parity bit
	 * USBS    = take from structure One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    2c96:	e0 e4       	ldi	r30, 0x40	; 64
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 e8       	ldi	r24, 0x80	; 128
    2c9c:	80 83       	st	Z, r24
	UCSRC|=Config_Ptr->parity<<UPM0;
    2c9e:	a0 e4       	ldi	r26, 0x40	; 64
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e0 e4       	ldi	r30, 0x40	; 64
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	28 2f       	mov	r18, r24
    2caa:	eb 81       	ldd	r30, Y+3	; 0x03
    2cac:	fc 81       	ldd	r31, Y+4	; 0x04
    2cae:	81 81       	ldd	r24, Z+1	; 0x01
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	82 95       	swap	r24
    2cb6:	92 95       	swap	r25
    2cb8:	90 7f       	andi	r25, 0xF0	; 240
    2cba:	98 27       	eor	r25, r24
    2cbc:	80 7f       	andi	r24, 0xF0	; 240
    2cbe:	98 27       	eor	r25, r24
    2cc0:	82 2b       	or	r24, r18
    2cc2:	8c 93       	st	X, r24
	UCSRC|=Config_Ptr->stop_bit<<USBS;
    2cc4:	a0 e4       	ldi	r26, 0x40	; 64
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e0 e4       	ldi	r30, 0x40	; 64
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	28 2f       	mov	r18, r24
    2cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	82 2b       	or	r24, r18
    2ce8:	8c 93       	st	X, r24
	UCSRC|=Config_Ptr->bit_data<<UCSZ0;
    2cea:	a0 e4       	ldi	r26, 0x40	; 64
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e0 e4       	ldi	r30, 0x40	; 64
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	82 2b       	or	r24, r18
    2d06:	8c 93       	st	X, r24

	/************************** UBRRH & UBRRL Description ***************************/
					/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate* 8UL)))- 1);
    2d08:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d0c:	83 81       	ldd	r24, Z+3	; 0x03
    2d0e:	94 81       	ldd	r25, Z+4	; 0x04
    2d10:	a5 81       	ldd	r26, Z+5	; 0x05
    2d12:	b6 81       	ldd	r27, Z+6	; 0x06
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	aa 1f       	adc	r26, r26
    2d1a:	bb 1f       	adc	r27, r27
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	aa 1f       	adc	r26, r26
    2d22:	bb 1f       	adc	r27, r27
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	aa 1f       	adc	r26, r26
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	9c 01       	movw	r18, r24
    2d2e:	ad 01       	movw	r20, r26
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	92 e1       	ldi	r25, 0x12	; 18
    2d34:	aa e7       	ldi	r26, 0x7A	; 122
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__udivmodsi4>
    2d40:	da 01       	movw	r26, r20
    2d42:	c9 01       	movw	r24, r18
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d4a:	e0 e4       	ldi	r30, 0x40	; 64
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	89 2f       	mov	r24, r25
    2d54:	99 27       	eor	r25, r25
    2d56:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d58:	e9 e2       	ldi	r30, 0x29	; 41
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	80 83       	st	Z, r24
}
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	0f 92       	push	r0
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d7a:	eb e2       	ldi	r30, 0x2B	; 43
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	80 72       	andi	r24, 0x20	; 32
    2d86:	90 70       	andi	r25, 0x00	; 0
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	b9 f3       	breq	.-18     	; 0x2d7a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d8c:	ec e2       	ldi	r30, 0x2C	; 44
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2da4:	eb e2       	ldi	r30, 0x2B	; 43
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	88 23       	and	r24, r24
    2dac:	dc f7       	brge	.-10     	; 0x2da4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2dae:	ec e2       	ldi	r30, 0x2C	; 44
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <UART_sendString+0x6>
    2dc0:	0f 92       	push	r0
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	9b 83       	std	Y+3, r25	; 0x03
    2dc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dca:	19 82       	std	Y+1, r1	; 0x01
    2dcc:	0e c0       	rjmp	.+28     	; 0x2dea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd8:	fc 01       	movw	r30, r24
    2dda:	e2 0f       	add	r30, r18
    2ddc:	f3 1f       	adc	r31, r19
    2dde:	80 81       	ld	r24, Z
    2de0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
		i++;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	8f 5f       	subi	r24, 0xFF	; 255
    2de8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	fc 01       	movw	r30, r24
    2df6:	e2 0f       	add	r30, r18
    2df8:	f3 1f       	adc	r31, r19
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 23       	and	r24, r24
    2dfe:	39 f7       	brne	.-50     	; 0x2dce <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte(Str[i]);
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	e2 0f       	add	r30, r18
    2e0e:	f3 1f       	adc	r31, r19
    2e10:	80 81       	ld	r24, Z
    2e12:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e22:	0f 93       	push	r16
    2e24:	1f 93       	push	r17
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <UART_receiveString+0xa>
    2e2c:	0f 92       	push	r0
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	9b 83       	std	Y+3, r25	; 0x03
    2e34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e36:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	8c 01       	movw	r16, r24
    2e44:	02 0f       	add	r16, r18
    2e46:	13 1f       	adc	r17, r19
    2e48:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <UART_recieveByte>
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	80 83       	st	Z, r24
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <UART_receiveString+0x4e>
	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
	{
		i++;
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	8f 5f       	subi	r24, 0xFF	; 255
    2e56:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	8c 01       	movw	r16, r24
    2e64:	02 0f       	add	r16, r18
    2e66:	13 1f       	adc	r17, r19
    2e68:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <UART_recieveByte>
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	80 83       	st	Z, r24
{
	uint8 i = 0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
	/* Receive the whole string until the '#' */
	while(Str[i] != '\0')
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e2 0f       	add	r30, r18
    2e7e:	f3 1f       	adc	r31, r19
    2e80:	80 81       	ld	r24, Z
    2e82:	88 23       	and	r24, r24
    2e84:	31 f7       	brne	.-52     	; 0x2e52 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	08 95       	ret

00002e96 <__udivmodsi4>:
    2e96:	a1 e2       	ldi	r26, 0x21	; 33
    2e98:	1a 2e       	mov	r1, r26
    2e9a:	aa 1b       	sub	r26, r26
    2e9c:	bb 1b       	sub	r27, r27
    2e9e:	fd 01       	movw	r30, r26
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <__udivmodsi4_ep>

00002ea2 <__udivmodsi4_loop>:
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	ee 1f       	adc	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	a2 17       	cp	r26, r18
    2eac:	b3 07       	cpc	r27, r19
    2eae:	e4 07       	cpc	r30, r20
    2eb0:	f5 07       	cpc	r31, r21
    2eb2:	20 f0       	brcs	.+8      	; 0x2ebc <__udivmodsi4_ep>
    2eb4:	a2 1b       	sub	r26, r18
    2eb6:	b3 0b       	sbc	r27, r19
    2eb8:	e4 0b       	sbc	r30, r20
    2eba:	f5 0b       	sbc	r31, r21

00002ebc <__udivmodsi4_ep>:
    2ebc:	66 1f       	adc	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	1a 94       	dec	r1
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <__udivmodsi4_loop>
    2ec8:	60 95       	com	r22
    2eca:	70 95       	com	r23
    2ecc:	80 95       	com	r24
    2ece:	90 95       	com	r25
    2ed0:	9b 01       	movw	r18, r22
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	bd 01       	movw	r22, r26
    2ed6:	cf 01       	movw	r24, r30
    2ed8:	08 95       	ret

00002eda <__prologue_saves__>:
    2eda:	2f 92       	push	r2
    2edc:	3f 92       	push	r3
    2ede:	4f 92       	push	r4
    2ee0:	5f 92       	push	r5
    2ee2:	6f 92       	push	r6
    2ee4:	7f 92       	push	r7
    2ee6:	8f 92       	push	r8
    2ee8:	9f 92       	push	r9
    2eea:	af 92       	push	r10
    2eec:	bf 92       	push	r11
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	ca 1b       	sub	r28, r26
    2f04:	db 0b       	sbc	r29, r27
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	09 94       	ijmp

00002f12 <__epilogue_restores__>:
    2f12:	2a 88       	ldd	r2, Y+18	; 0x12
    2f14:	39 88       	ldd	r3, Y+17	; 0x11
    2f16:	48 88       	ldd	r4, Y+16	; 0x10
    2f18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f24:	b9 84       	ldd	r11, Y+9	; 0x09
    2f26:	c8 84       	ldd	r12, Y+8	; 0x08
    2f28:	df 80       	ldd	r13, Y+7	; 0x07
    2f2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f30:	1b 81       	ldd	r17, Y+3	; 0x03
    2f32:	aa 81       	ldd	r26, Y+2	; 0x02
    2f34:	b9 81       	ldd	r27, Y+1	; 0x01
    2f36:	ce 0f       	add	r28, r30
    2f38:	d1 1d       	adc	r29, r1
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	ed 01       	movw	r28, r26
    2f46:	08 95       	ret

00002f48 <strcmp>:
    2f48:	fb 01       	movw	r30, r22
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	8d 91       	ld	r24, X+
    2f4e:	01 90       	ld	r0, Z+
    2f50:	80 19       	sub	r24, r0
    2f52:	01 10       	cpse	r0, r1
    2f54:	d9 f3       	breq	.-10     	; 0x2f4c <strcmp+0x4>
    2f56:	99 0b       	sbc	r25, r25
    2f58:	08 95       	ret

00002f5a <_exit>:
    2f5a:	f8 94       	cli

00002f5c <__stop_program>:
    2f5c:	ff cf       	rjmp	.-2      	; 0x2f5c <__stop_program>
